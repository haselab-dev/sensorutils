{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"sensorutils Welcome! This is the documentation for sensorutils. For users Installation sensorutils\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb User Guide \u4ee3\u8868\u7684\u306a\u4f7f\u3044\u65b9 Reference sensorutils\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 Dataset Loader \u884c\u52d5\u8a8d\u8b58\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30ed\u30fc\u30c0 For developers \u30d0\u30b0\u306e\u5831\u544a\u3084\u6a5f\u80fd\u306e\u8ffd\u52a0\u306f Github\u306eIssue \u306b\u6295\u7a3f\u3059\u308b\u304b \u958b\u767a\u30e1\u30f3\u30d0\u30fc\u306b\u76f4\u63a5\u5831\u544a\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u4f5c\u6210\u3057\u3066\u304f\u308c\u308b\u4eba\u52df\u96c6\u4e2d Acknowledgements","title":"Home"},{"location":"#sensorutils","text":"Welcome! This is the documentation for sensorutils.","title":"sensorutils"},{"location":"#for-users","text":"","title":"For users"},{"location":"#installation","text":"sensorutils\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","title":"Installation"},{"location":"#user-guide","text":"\u4ee3\u8868\u7684\u306a\u4f7f\u3044\u65b9","title":"User Guide"},{"location":"#reference","text":"sensorutils\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9","title":"Reference"},{"location":"#dataset-loader","text":"\u884c\u52d5\u8a8d\u8b58\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30ed\u30fc\u30c0","title":"Dataset Loader"},{"location":"#for-developers","text":"\u30d0\u30b0\u306e\u5831\u544a\u3084\u6a5f\u80fd\u306e\u8ffd\u52a0\u306f Github\u306eIssue \u306b\u6295\u7a3f\u3059\u308b\u304b \u958b\u767a\u30e1\u30f3\u30d0\u30fc\u306b\u76f4\u63a5\u5831\u544a\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u4f5c\u6210\u3057\u3066\u304f\u308c\u308b\u4eba\u52df\u96c6\u4e2d","title":"For developers"},{"location":"#acknowledgements","text":"","title":"Acknowledgements"},{"location":"debug/","text":"DEBUG PAGE \u30c7\u30d0\u30c3\u30b0\u30da\u30fc\u30b8 MathJax One-line \u5f0f \\(H(p, q) = - \\sum^{D-1}_{i=0}{p_i \\log{q_i}}\\) \u306f\u4ea4\u5dee\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u3067\u3059\uff0e 1 \u5f0f $ H ( p, q ) = - \\sum ^{D - 1 }_{i = 0 }{p_i \\log {q_i}} $ \u306f\u4ea4\u5dee\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u3067\u3059\uff0e Multi-line \u30ac\u30a6\u30b9\u7a4d\u5206 \\[ \\int^{\\infty}_{-\\infty}{e^{-\\alpha x^2} dx} = \\sqrt{\\frac{\\pi}{\\alpha}} \\] 1 2 3 $$ \\int ^{ \\infty }_{ - \\infty }{e^{ - \\alpha x^ 2 } dx} = \\sqrt { \\frac { \\pi }{ \\alpha }} $$ \u7d75\u6587\u5b57 \u6ce8\u91c8 \u30b5\u30f3\u30d7\u30eb 1 Note\u3084Warning Note \u3053\u308c\u306f\u30ce\u30fc\u30c8\u3067\u3059\u3002 Tip \u30d2\u30f3\u30c8\u3067\u3059\u3002 Warning \u3053\u308c\u306f\u8b66\u544a\u3067\u3059 Danger \u3053\u308c\u306f\u5371\u967a\u3067\u3059\u3002 Success \u3053\u308c\u306f\u6210\u529f\u3067\u3059\u3002 Failure \u3053\u308c\u306f\u5931\u6557\u3067\u3059\u3002 Bug \u3053\u308c\u306f\u30d0\u30b0\u3067\u3059\u3002 Summary \u3053\u308c\u306f\u6982\u8981\u3067\u3059\u3002 sample \u21a9","title":"DEBUG PAGE"},{"location":"debug/#debug-page","text":"\u30c7\u30d0\u30c3\u30b0\u30da\u30fc\u30b8","title":"DEBUG PAGE"},{"location":"debug/#mathjax","text":"","title":"MathJax"},{"location":"debug/#one-line","text":"\u5f0f \\(H(p, q) = - \\sum^{D-1}_{i=0}{p_i \\log{q_i}}\\) \u306f\u4ea4\u5dee\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u3067\u3059\uff0e 1 \u5f0f $ H ( p, q ) = - \\sum ^{D - 1 }_{i = 0 }{p_i \\log {q_i}} $ \u306f\u4ea4\u5dee\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u3067\u3059\uff0e","title":"One-line"},{"location":"debug/#multi-line","text":"\u30ac\u30a6\u30b9\u7a4d\u5206 \\[ \\int^{\\infty}_{-\\infty}{e^{-\\alpha x^2} dx} = \\sqrt{\\frac{\\pi}{\\alpha}} \\] 1 2 3 $$ \\int ^{ \\infty }_{ - \\infty }{e^{ - \\alpha x^ 2 } dx} = \\sqrt { \\frac { \\pi }{ \\alpha }} $$","title":"Multi-line"},{"location":"debug/#_1","text":"","title":"\u7d75\u6587\u5b57"},{"location":"debug/#_2","text":"\u30b5\u30f3\u30d7\u30eb 1","title":"\u6ce8\u91c8"},{"location":"debug/#notewarning","text":"Note \u3053\u308c\u306f\u30ce\u30fc\u30c8\u3067\u3059\u3002 Tip \u30d2\u30f3\u30c8\u3067\u3059\u3002 Warning \u3053\u308c\u306f\u8b66\u544a\u3067\u3059 Danger \u3053\u308c\u306f\u5371\u967a\u3067\u3059\u3002 Success \u3053\u308c\u306f\u6210\u529f\u3067\u3059\u3002 Failure \u3053\u308c\u306f\u5931\u6557\u3067\u3059\u3002 Bug \u3053\u308c\u306f\u30d0\u30b0\u3067\u3059\u3002 Summary \u3053\u308c\u306f\u6982\u8981\u3067\u3059\u3002 sample \u21a9","title":"Note\u3084Warning"},{"location":"guide/","text":"User Guide \u3053\u306e\u30da\u30fc\u30b8\u3067\u306fsensorutils\u306e\u4ee3\u8868\u7684\u306a\u30c4\u30fc\u30eb\u306e\u5229\u7528\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u3066\u3044\u307e\u3059\uff0e sensorutils.core\u306e\u5229\u7528 \u30bf\u30fc\u30b2\u30c3\u30c8\u30e9\u30d9\u30eb\u3092\u3082\u3068\u306b\u30c7\u30fc\u30bf\u3092\u5206\u5272\u3059\u308b \u884c\u52d5\u8a8d\u8b58\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u306f\uff0c\u3059\u3079\u3066\u306e\u30c7\u30fc\u30bf\u304c\u4e00\u3064\u306eCSV\u30d5\u30a1\u30a4\u30eb\u306b\u307e\u3068\u3081\u3089\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u3042\u308a\uff0c\u3053\u306e\u30c7\u30fc\u30bf\u304b\u3089\u884c\u52d5\u3054\u3068\u306e\u30bb\u30f3\u30b5\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059\u306b\u306f\u884c\u52d5\u30e9\u30d9\u30eb\u3092\u3082\u3068\u306b\u914d\u5217\u3092\u5206\u5272\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e sensorutils\u3067\u306f split_using_target \u95a2\u6570\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u30e9\u30d9\u30eb\u3092\u3082\u3068\u306b\u3057\u305f\u914d\u5217\u306e\u5206\u5272\u3092\u9ad8\u901f\u306b\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\uff0e\u6b21\u306e\u30b3\u30fc\u30c9\u306f split_using_target \u95a2\u6570\u306e\u7c21\u5358\u306a\u5229\u7528\u4f8b\u3067\u3059\uff0e 1 2 3 4 5 6 7 8 9 10 11 12 13 import numpy as np from sensorutils.core import split_using_target target = np . array ([ 0 , 0 , 1 , 1 , 2 , 2 , 1 ]) # \u30bf\u30fc\u30b2\u30c3\u30c8\u30e9\u30d9\u30eb source = np . array ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 ]) # \u5206\u5272\u3059\u308b\u914d\u5217 splited = split_from_target ( src , tgt ) print ( splited ) # splited == { # 0: [np.array([1, 2])], # 1: [np.array([3, 4]), np.array([7])], # 2: [np.array([5, 6])] # } Numpy\u914d\u5217\u306b\u5bfe\u3057\u3066sliding-window\u51e6\u7406\u3092\u884c\u3046 \u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u3084\u6df1\u5c64\u5b66\u7fd2\u30e2\u30c7\u30eb\u3078\u306e\u5165\u529b\u306f\u591a\u304f\u306e\u5834\u5408\u4e00\u5b9a\u306e\u30b5\u30a4\u30ba\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\uff0c\u30bb\u30f3\u30b5\u30c7\u30fc\u30bf\u306f\u53ef\u5909\u9577\u306e\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3067\u3042\u308b\u305f\u3081\uff0c\u305d\u306e\u307e\u307e\u3067\u306f\u30e2\u30c7\u30eb\u3078\u5165\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\uff0e\u305d\u3053\u3067\u30bb\u30f3\u30b5\u3092\u7528\u3044\u305f\u884c\u52d5\u8a8d\u8b58\u3067\u306f\uff0c\u53ef\u5909\u9577\u306e\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u304b\u3089\u30b9\u30e9\u30a4\u30c7\u30a3\u30f3\u30b0\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u7528\u3044\u3066\u4e00\u5b9a\u30b5\u30a4\u30ba\u306e\u90e8\u5206\u7cfb\u5217\u3092\u53d6\u308a\u51fa\u3059\u3053\u3068\u3067\u30e2\u30c7\u30eb\u3078\u306e\u5165\u529b\u3092\u4f5c\u6210\u3057\u307e\u3059\uff0e sensorutils\u3067\u306f to_frames \u95a2\u6570\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u9ad8\u901f\u306asliding-window\u51e6\u7406\u3092\u7c21\u5358\u306b\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\uff0e\u6b21\u306e\u30b3\u30fc\u30c9\u306f to_frames \u95a2\u6570\u306e\u4f7f\u7528\u4f8b\u3067\u3059\uff0e 1 2 3 4 5 6 7 8 9 10 11 12 13 import numpy as np from sensorutils.core import to_frames source = np . array ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 ]) # \u5206\u5272\u3059\u308b\u914d\u5217 window_size = 3 stride = 2 frames = to_frames ( source , window_size , stride ) # frames == np.array([ # [1, 2, 3], # [3, 4, 5], # [5, 6, 7], # ]) \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u30ed\u30fc\u30c0\u306e\u5229\u7528 \u30bb\u30f3\u30b5\u306b\u95a2\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306a\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u5229\u7528\u3059\u308b\u306b\u306f\uff0c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u3080\u30b3\u30fc\u30c9\u3092\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\u3057\u304b\u3057\uff0c\u884c\u52d5\u8a8d\u8b58\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306a\u3069\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u753b\u50cf\u7cfb\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u7570\u306a\u308a\uff0c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u3088\u3063\u3066\u63d0\u4f9b\u3055\u308c\u308b\u5f62\u304c\u5927\u304d\u304f\u7570\u306a\u308b\u305f\u3081\uff0c\u8aad\u307f\u8fbc\u307f\u30b3\u30fc\u30c9\u306e\u5b9f\u88c5\u306f\u7169\u96d1\u306a\u4f5c\u696d\u3068\u306a\u308a\u307e\u3059\uff0e sensorutils\u3067\u306f\uff0c\u8aad\u307f\u8fbc\u307f\u30b3\u30fc\u30c9\u306e\u5b9f\u88c5\u306e\u624b\u9593\u3092\u524a\u6e1b\u3059\u308b\u305f\u3081\u306b\u4ee3\u8868\u7684\u306a\u30bb\u30f3\u30b5\u7cfb\u306e\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30ed\u30fc\u30c0\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\uff0e\u3053\u308c\u3092\u6d3b\u7528\u3059\u308b\u3053\u3068\u3067\uff0c\u8aad\u307f\u8fbc\u307f\u30b3\u30fc\u30c9\u306e\u5b9f\u88c5\u306e\u624b\u9593\u3092\u6e1b\u3089\u3057\uff0c\u3088\u308a\u672c\u8cea\u7684\u306a\u4f5c\u696d\u306b\u6ce8\u529b\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\uff0e \u4ee5\u4e0b\u3067\u306f\u5b9f\u88c5\u304c\u975e\u5e38\u306b\u5384\u4ecb\u306aHASC\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\u3092sensorutils\u3092\u5229\u7528\u3057\u3066\u884c\u3044\u307e\u3059\uff0e HASC\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30ed\u30fc\u30c9\u3057\u3066\u307f\u308b HASC\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u5e45256\u3001\u30b9\u30c8\u30e9\u30a4\u30c9\u5e45256\u3067sliding-window\u51e6\u7406\u3057\u305f\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u307e\u3059\uff0e \u624b\u9806 HASC\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u53d6\u5f97\u3059\u308b\uff0e \u4e0b\u8a18\u30b3\u30fc\u30c9\u306e hasc_path \u306e\u7b87\u6240\u3092\u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30d1\u30b9\u306b\u66f8\u304d\u63db\u3048\u308b\uff0e (Optional) 16\u884c\u76ee\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u4f5c\u6210\u3059\u308b\u30d1\u30b9\u3092\u5909\u66f4 \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u5b9f\u884c\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4e0b\u306b hasc.csv \u3068\u3044\u3046\u540d\u524d\u3067\u30ad\u30e3\u30c3\u30b7\u30e5\u304c\u4f5c\u6210\u3055\u308c\u308b\uff0e \u5b9f\u884c! Warning \u521d\u56de\u306e\u5b9f\u884c\u3067\u306f\u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u53ce\u96c6\u3068\u7d71\u5408\u306e\u51e6\u7406\u3092\u884c\u3046\u305f\u3081\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\uff0e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import numpy as np from pathlib import Path from sensorutils.datasets.hasc import HASC # About HASC ## http://hasc.jp/ window_size = 256 # sliding-window\u3067\u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u3059\u308b\u3068\u304d\u306ewindow\u5e45 stride = 256 # stride\u5e45 # HASC\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u30d1\u30b9 hasc_path = Path ( 'E:/<any where>/HASC-PAC2016/' ) # hasc\u30ed\u30fc\u30c0\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4f5c\u6210 # \u7b2c2\u5f15\u6570\u306f\u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u5148\u30d1\u30b9 hasc = HASC ( hasc_path , Path ( 'hasc.csv' )) x , y , act2id = hasc . load ( window_size , stride , ftrim = 2 * 100 , btrim = 2 * 100 ) print ( f 'x: { x . shape } ' ) print ( f 'y: { y . shape } ' ) HASC\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u88ab\u9a13\u8005\u3067\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3057\u3066\u8aad\u307f\u8fbc\u3080 \u624b\u9806\u306f\"HASC\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30ed\u30fc\u30c9\u3057\u3066\u307f\u308b\"\u3068\u540c\u69d8\u3067\u3059\uff0e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import numpy as np from pathlib import Path from sensorutils.datasets.hasc import HASC # About HASC ## http://hasc.jp/ window_size = 256 # sliding-window\u3067\u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u3059\u308b\u3068\u304d\u306ewindow\u5e45 stride = 256 # stride\u5e45 # HASC\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u30d1\u30b9 hasc_path = Path ( 'E:/<any where>/HASC-PAC2016/' ) # hasc\u30ed\u30fc\u30c0\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4f5c\u6210 # \u7b2c2\u5f15\u6570\u306f\u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u5148\u30d1\u30b9 hasc = HASC ( hasc_path , Path ( 'hasc.csv' )) # \u30af\u30a8\u30ea\u306e\u4f5c\u6210 # \u3053\u306e6\u4eba\u306e\u88ab\u9a13\u8005\u306e\u30bb\u30f3\u30b5\u30c7\u30fc\u30bf\u306e\u307f\u3092\u53d6\u5f97\u3059\u308b persons = [ 'person01068' , 'person03053' , 'person02033' , 'person01106' , 'person03079' , 'person02007' ] queries = { 'Person' : f 'Person in { persons } ' } # \u8aad\u307f\u8fbc\u307f x , y , act2id = hasc . load ( window_size , stride , queries = queries , ftrim = 2 * 100 , btrim = 2 * 100 ) print ( f 'x: { x . shape } ' ) print ( f 'y: { y . shape } ' )","title":"User Guide"},{"location":"guide/#user-guide","text":"\u3053\u306e\u30da\u30fc\u30b8\u3067\u306fsensorutils\u306e\u4ee3\u8868\u7684\u306a\u30c4\u30fc\u30eb\u306e\u5229\u7528\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u3066\u3044\u307e\u3059\uff0e","title":"User Guide"},{"location":"guide/#sensorutilscore","text":"","title":"sensorutils.core\u306e\u5229\u7528"},{"location":"guide/#_1","text":"\u884c\u52d5\u8a8d\u8b58\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u306f\uff0c\u3059\u3079\u3066\u306e\u30c7\u30fc\u30bf\u304c\u4e00\u3064\u306eCSV\u30d5\u30a1\u30a4\u30eb\u306b\u307e\u3068\u3081\u3089\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u3042\u308a\uff0c\u3053\u306e\u30c7\u30fc\u30bf\u304b\u3089\u884c\u52d5\u3054\u3068\u306e\u30bb\u30f3\u30b5\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059\u306b\u306f\u884c\u52d5\u30e9\u30d9\u30eb\u3092\u3082\u3068\u306b\u914d\u5217\u3092\u5206\u5272\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e sensorutils\u3067\u306f split_using_target \u95a2\u6570\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u30e9\u30d9\u30eb\u3092\u3082\u3068\u306b\u3057\u305f\u914d\u5217\u306e\u5206\u5272\u3092\u9ad8\u901f\u306b\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\uff0e\u6b21\u306e\u30b3\u30fc\u30c9\u306f split_using_target \u95a2\u6570\u306e\u7c21\u5358\u306a\u5229\u7528\u4f8b\u3067\u3059\uff0e 1 2 3 4 5 6 7 8 9 10 11 12 13 import numpy as np from sensorutils.core import split_using_target target = np . array ([ 0 , 0 , 1 , 1 , 2 , 2 , 1 ]) # \u30bf\u30fc\u30b2\u30c3\u30c8\u30e9\u30d9\u30eb source = np . array ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 ]) # \u5206\u5272\u3059\u308b\u914d\u5217 splited = split_from_target ( src , tgt ) print ( splited ) # splited == { # 0: [np.array([1, 2])], # 1: [np.array([3, 4]), np.array([7])], # 2: [np.array([5, 6])] # }","title":"\u30bf\u30fc\u30b2\u30c3\u30c8\u30e9\u30d9\u30eb\u3092\u3082\u3068\u306b\u30c7\u30fc\u30bf\u3092\u5206\u5272\u3059\u308b"},{"location":"guide/#numpysliding-window","text":"\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u3084\u6df1\u5c64\u5b66\u7fd2\u30e2\u30c7\u30eb\u3078\u306e\u5165\u529b\u306f\u591a\u304f\u306e\u5834\u5408\u4e00\u5b9a\u306e\u30b5\u30a4\u30ba\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\uff0c\u30bb\u30f3\u30b5\u30c7\u30fc\u30bf\u306f\u53ef\u5909\u9577\u306e\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3067\u3042\u308b\u305f\u3081\uff0c\u305d\u306e\u307e\u307e\u3067\u306f\u30e2\u30c7\u30eb\u3078\u5165\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\uff0e\u305d\u3053\u3067\u30bb\u30f3\u30b5\u3092\u7528\u3044\u305f\u884c\u52d5\u8a8d\u8b58\u3067\u306f\uff0c\u53ef\u5909\u9577\u306e\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u304b\u3089\u30b9\u30e9\u30a4\u30c7\u30a3\u30f3\u30b0\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u7528\u3044\u3066\u4e00\u5b9a\u30b5\u30a4\u30ba\u306e\u90e8\u5206\u7cfb\u5217\u3092\u53d6\u308a\u51fa\u3059\u3053\u3068\u3067\u30e2\u30c7\u30eb\u3078\u306e\u5165\u529b\u3092\u4f5c\u6210\u3057\u307e\u3059\uff0e sensorutils\u3067\u306f to_frames \u95a2\u6570\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u9ad8\u901f\u306asliding-window\u51e6\u7406\u3092\u7c21\u5358\u306b\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\uff0e\u6b21\u306e\u30b3\u30fc\u30c9\u306f to_frames \u95a2\u6570\u306e\u4f7f\u7528\u4f8b\u3067\u3059\uff0e 1 2 3 4 5 6 7 8 9 10 11 12 13 import numpy as np from sensorutils.core import to_frames source = np . array ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 ]) # \u5206\u5272\u3059\u308b\u914d\u5217 window_size = 3 stride = 2 frames = to_frames ( source , window_size , stride ) # frames == np.array([ # [1, 2, 3], # [3, 4, 5], # [5, 6, 7], # ])","title":"Numpy\u914d\u5217\u306b\u5bfe\u3057\u3066sliding-window\u51e6\u7406\u3092\u884c\u3046"},{"location":"guide/#_2","text":"\u30bb\u30f3\u30b5\u306b\u95a2\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306a\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u5229\u7528\u3059\u308b\u306b\u306f\uff0c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u3080\u30b3\u30fc\u30c9\u3092\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\u3057\u304b\u3057\uff0c\u884c\u52d5\u8a8d\u8b58\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306a\u3069\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u753b\u50cf\u7cfb\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u7570\u306a\u308a\uff0c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u3088\u3063\u3066\u63d0\u4f9b\u3055\u308c\u308b\u5f62\u304c\u5927\u304d\u304f\u7570\u306a\u308b\u305f\u3081\uff0c\u8aad\u307f\u8fbc\u307f\u30b3\u30fc\u30c9\u306e\u5b9f\u88c5\u306f\u7169\u96d1\u306a\u4f5c\u696d\u3068\u306a\u308a\u307e\u3059\uff0e sensorutils\u3067\u306f\uff0c\u8aad\u307f\u8fbc\u307f\u30b3\u30fc\u30c9\u306e\u5b9f\u88c5\u306e\u624b\u9593\u3092\u524a\u6e1b\u3059\u308b\u305f\u3081\u306b\u4ee3\u8868\u7684\u306a\u30bb\u30f3\u30b5\u7cfb\u306e\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30ed\u30fc\u30c0\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\uff0e\u3053\u308c\u3092\u6d3b\u7528\u3059\u308b\u3053\u3068\u3067\uff0c\u8aad\u307f\u8fbc\u307f\u30b3\u30fc\u30c9\u306e\u5b9f\u88c5\u306e\u624b\u9593\u3092\u6e1b\u3089\u3057\uff0c\u3088\u308a\u672c\u8cea\u7684\u306a\u4f5c\u696d\u306b\u6ce8\u529b\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\uff0e \u4ee5\u4e0b\u3067\u306f\u5b9f\u88c5\u304c\u975e\u5e38\u306b\u5384\u4ecb\u306aHASC\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\u3092sensorutils\u3092\u5229\u7528\u3057\u3066\u884c\u3044\u307e\u3059\uff0e","title":"\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u30ed\u30fc\u30c0\u306e\u5229\u7528"},{"location":"guide/#hasc","text":"HASC\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u5e45256\u3001\u30b9\u30c8\u30e9\u30a4\u30c9\u5e45256\u3067sliding-window\u51e6\u7406\u3057\u305f\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u307e\u3059\uff0e \u624b\u9806 HASC\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u53d6\u5f97\u3059\u308b\uff0e \u4e0b\u8a18\u30b3\u30fc\u30c9\u306e hasc_path \u306e\u7b87\u6240\u3092\u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30d1\u30b9\u306b\u66f8\u304d\u63db\u3048\u308b\uff0e (Optional) 16\u884c\u76ee\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u4f5c\u6210\u3059\u308b\u30d1\u30b9\u3092\u5909\u66f4 \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u5b9f\u884c\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4e0b\u306b hasc.csv \u3068\u3044\u3046\u540d\u524d\u3067\u30ad\u30e3\u30c3\u30b7\u30e5\u304c\u4f5c\u6210\u3055\u308c\u308b\uff0e \u5b9f\u884c! Warning \u521d\u56de\u306e\u5b9f\u884c\u3067\u306f\u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u53ce\u96c6\u3068\u7d71\u5408\u306e\u51e6\u7406\u3092\u884c\u3046\u305f\u3081\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\uff0e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import numpy as np from pathlib import Path from sensorutils.datasets.hasc import HASC # About HASC ## http://hasc.jp/ window_size = 256 # sliding-window\u3067\u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u3059\u308b\u3068\u304d\u306ewindow\u5e45 stride = 256 # stride\u5e45 # HASC\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u30d1\u30b9 hasc_path = Path ( 'E:/<any where>/HASC-PAC2016/' ) # hasc\u30ed\u30fc\u30c0\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4f5c\u6210 # \u7b2c2\u5f15\u6570\u306f\u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u5148\u30d1\u30b9 hasc = HASC ( hasc_path , Path ( 'hasc.csv' )) x , y , act2id = hasc . load ( window_size , stride , ftrim = 2 * 100 , btrim = 2 * 100 ) print ( f 'x: { x . shape } ' ) print ( f 'y: { y . shape } ' )","title":"HASC\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30ed\u30fc\u30c9\u3057\u3066\u307f\u308b"},{"location":"guide/#hasc_1","text":"\u624b\u9806\u306f\"HASC\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30ed\u30fc\u30c9\u3057\u3066\u307f\u308b\"\u3068\u540c\u69d8\u3067\u3059\uff0e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import numpy as np from pathlib import Path from sensorutils.datasets.hasc import HASC # About HASC ## http://hasc.jp/ window_size = 256 # sliding-window\u3067\u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u3059\u308b\u3068\u304d\u306ewindow\u5e45 stride = 256 # stride\u5e45 # HASC\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u30d1\u30b9 hasc_path = Path ( 'E:/<any where>/HASC-PAC2016/' ) # hasc\u30ed\u30fc\u30c0\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4f5c\u6210 # \u7b2c2\u5f15\u6570\u306f\u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u5148\u30d1\u30b9 hasc = HASC ( hasc_path , Path ( 'hasc.csv' )) # \u30af\u30a8\u30ea\u306e\u4f5c\u6210 # \u3053\u306e6\u4eba\u306e\u88ab\u9a13\u8005\u306e\u30bb\u30f3\u30b5\u30c7\u30fc\u30bf\u306e\u307f\u3092\u53d6\u5f97\u3059\u308b persons = [ 'person01068' , 'person03053' , 'person02033' , 'person01106' , 'person03079' , 'person02007' ] queries = { 'Person' : f 'Person in { persons } ' } # \u8aad\u307f\u8fbc\u307f x , y , act2id = hasc . load ( window_size , stride , queries = queries , ftrim = 2 * 100 , btrim = 2 * 100 ) print ( f 'x: { x . shape } ' ) print ( f 'y: { y . shape } ' )","title":"HASC\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u88ab\u9a13\u8005\u3067\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3057\u3066\u8aad\u307f\u8fbc\u3080"},{"location":"install/","text":"Installation sensorutils\u306fpip\u304b\u3089\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3053\u3068\u3067\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 Requirements python 3.x numpy pandas scipy Pip \u6700\u65b0\u7248\u306f\u4e0b\u8a18\u306e\u30b3\u30de\u30f3\u30c9\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\uff0e \u4ee5\u524d\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f \u3053\u3061\u3089 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff0e 1 pip install git+https://github.com/haselab-dev/sensorutils \u7384\u4eba\u5411\u3051 \u7279\u5b9a\u306e\u30d6\u30e9\u30f3\u30c1\u3084\u30bf\u30b0\u3092\u6307\u5b9a\u3057\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5834\u5408 1 pip install git+https://github.com/haselab-dev/sensorutils@ { \u30d6\u30e9\u30f3\u30c1\u540d | \u30bf\u30b0\u540d } Conda Note \u7279\u306b\u3053\u3060\u308f\u308a\u304c\u306a\u3051\u308c\u3070pip\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3053\u3068\u3092\u304a\u3059\u3059\u3081\u3057\u307e\u3059\uff0e Warning \u4ee5\u4e0b\u306e\u624b\u9806\u3092\u5b88\u3089\u306a\u3044\u5834\u5408\uff0c\u74b0\u5883\u304c\u58ca\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u305f\u3081\uff0c\u5341\u5206\u306b\u6ce8\u610f\u3092\u6255\u3063\u3066\u4f5c\u696d\u3092\u884c\u3063\u3066\u304f\u3060\u3055\u3044\uff01 \u74b0\u5883\u304c\u58ca\u308c\u3066\u3082\u8cac\u4efb\u306f\u3068\u308c\u307e\u305b\u3093\uff0e conda-build\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb conda\u7528\u306b\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30d3\u30eb\u30c9\u3059\u308b\u305f\u3081\u306e\u30c4\u30fc\u30eb\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\uff0e\u3059\u3067\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306f\u3053\u306e\u30b9\u30c6\u30c3\u30d7\u306f\u98db\u3070\u3057\u3066\u304f\u3060\u3055\u3044\uff0e conda-build \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3067\u5b9f\u884c\u53ef\u80fd\u3067\u3059\u304c\uff0c \u5b9f\u884c\u6642\u306b\u306f\u5fc5\u305a base \u74b0\u5883\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044 \uff0e conda-build \u304c base \u4ee5\u5916\u306e\u74b0\u5883\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u308b\u3068conda\u74b0\u5883\u304c\u58ca\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\uff0e 1 conda install -n base conda-build \u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30d3\u30eb\u30c9\u3068\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb \u6b21\u306bsensorutils\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30d3\u30eb\u30c9\u3092\u884c\u3044\u307e\u3059\uff0e\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3067\u306f\u6700\u65b0\u7248\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u30d3\u30eb\u30c9\u53ca\u3073\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u307e\u3059\uff0e \u4ed6\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u3044\u5834\u5408\u306f2\u884c\u76ee\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u30ea\u30f3\u30af\u3067\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u6307\u5b9a\u3057\u3066\u4e0b\u3055\u3044( \u53c2\u8003 )\uff0e 1 2 3 4 5 6 7 8 9 cd <\u9069\u5f53\u306a\u4f5c\u696d\u30c7\u30a3\u30ec\u30af\u30c8\u30ea> git clone https://github.com/haselab-dev/sensorutils.git cd sensorutils conda activate <\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308bconda\u74b0\u5883> conda build recipe conda install --use-local sensorutils # conda install -c file:///C:/Users/{name}/Miniconda3/conda-bld sensorutils \u5f8c\u59cb\u672b 1 2 conda build purge # not delete conda package conda build purge-all # delete conda package Uninstall \u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u524a\u9664\u3059\u308b\u5834\u5408 Pip 1 pip uninstall sensorutils Conda 1 conda uninstall sensorutils","title":"Installation"},{"location":"install/#installation","text":"sensorutils\u306fpip\u304b\u3089\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3053\u3068\u3067\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002","title":"Installation"},{"location":"install/#requirements","text":"python 3.x numpy pandas scipy","title":"Requirements"},{"location":"install/#pip","text":"\u6700\u65b0\u7248\u306f\u4e0b\u8a18\u306e\u30b3\u30de\u30f3\u30c9\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\uff0e \u4ee5\u524d\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f \u3053\u3061\u3089 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff0e 1 pip install git+https://github.com/haselab-dev/sensorutils \u7384\u4eba\u5411\u3051 \u7279\u5b9a\u306e\u30d6\u30e9\u30f3\u30c1\u3084\u30bf\u30b0\u3092\u6307\u5b9a\u3057\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5834\u5408 1 pip install git+https://github.com/haselab-dev/sensorutils@ { \u30d6\u30e9\u30f3\u30c1\u540d | \u30bf\u30b0\u540d }","title":"Pip"},{"location":"install/#conda","text":"Note \u7279\u306b\u3053\u3060\u308f\u308a\u304c\u306a\u3051\u308c\u3070pip\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3053\u3068\u3092\u304a\u3059\u3059\u3081\u3057\u307e\u3059\uff0e Warning \u4ee5\u4e0b\u306e\u624b\u9806\u3092\u5b88\u3089\u306a\u3044\u5834\u5408\uff0c\u74b0\u5883\u304c\u58ca\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u305f\u3081\uff0c\u5341\u5206\u306b\u6ce8\u610f\u3092\u6255\u3063\u3066\u4f5c\u696d\u3092\u884c\u3063\u3066\u304f\u3060\u3055\u3044\uff01 \u74b0\u5883\u304c\u58ca\u308c\u3066\u3082\u8cac\u4efb\u306f\u3068\u308c\u307e\u305b\u3093\uff0e","title":"Conda"},{"location":"install/#conda-build","text":"conda\u7528\u306b\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30d3\u30eb\u30c9\u3059\u308b\u305f\u3081\u306e\u30c4\u30fc\u30eb\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\uff0e\u3059\u3067\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306f\u3053\u306e\u30b9\u30c6\u30c3\u30d7\u306f\u98db\u3070\u3057\u3066\u304f\u3060\u3055\u3044\uff0e conda-build \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3067\u5b9f\u884c\u53ef\u80fd\u3067\u3059\u304c\uff0c \u5b9f\u884c\u6642\u306b\u306f\u5fc5\u305a base \u74b0\u5883\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044 \uff0e conda-build \u304c base \u4ee5\u5916\u306e\u74b0\u5883\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u308b\u3068conda\u74b0\u5883\u304c\u58ca\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\uff0e 1 conda install -n base conda-build","title":"conda-build\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"install/#_1","text":"\u6b21\u306bsensorutils\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30d3\u30eb\u30c9\u3092\u884c\u3044\u307e\u3059\uff0e\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3067\u306f\u6700\u65b0\u7248\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u30d3\u30eb\u30c9\u53ca\u3073\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u307e\u3059\uff0e \u4ed6\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u3044\u5834\u5408\u306f2\u884c\u76ee\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u30ea\u30f3\u30af\u3067\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u6307\u5b9a\u3057\u3066\u4e0b\u3055\u3044( \u53c2\u8003 )\uff0e 1 2 3 4 5 6 7 8 9 cd <\u9069\u5f53\u306a\u4f5c\u696d\u30c7\u30a3\u30ec\u30af\u30c8\u30ea> git clone https://github.com/haselab-dev/sensorutils.git cd sensorutils conda activate <\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308bconda\u74b0\u5883> conda build recipe conda install --use-local sensorutils # conda install -c file:///C:/Users/{name}/Miniconda3/conda-bld sensorutils","title":"\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30d3\u30eb\u30c9\u3068\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"install/#_2","text":"1 2 conda build purge # not delete conda package conda build purge-all # delete conda package","title":"\u5f8c\u59cb\u672b"},{"location":"install/#uninstall","text":"\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u524a\u9664\u3059\u308b\u5834\u5408","title":"Uninstall"},{"location":"install/#pip_1","text":"1 pip uninstall sensorutils","title":"Pip"},{"location":"install/#conda_1","text":"1 conda uninstall sensorutils","title":"Conda"},{"location":"install_prev_ver/","text":"Installation with previous version v0.11.0 1 pip install git+https://github.com/haselab-dev/sensorutils@v0.11.0","title":"Installation with previous version"},{"location":"install_prev_ver/#installation-with-previous-version","text":"","title":"Installation with previous version"},{"location":"install_prev_ver/#v0110","text":"1 pip install git+https://github.com/haselab-dev/sensorutils@v0.11.0","title":"v0.11.0"},{"location":"refs/","text":"Reference sensorutils.core \u30bb\u30f3\u30b5\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e00\u822c\u7684\u306a\u64cd\u4f5c sensorutils.metrics \u8a55\u4fa1\u6307\u6a19 sensorutils.stats \u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u7d71\u8a08\u5024\u306e\u8a08\u7b97 sensorutils.augmentation \u30bb\u30f3\u30b5\u30c7\u30fc\u30bf\u5411\u3051\u306e\u30c7\u30fc\u30bf\u62e1\u5f35\u624b\u6cd5 sensorutils.datasets \u884c\u52d5\u8a8d\u8b58\u7cfb\u306e\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30ed\u30fc\u30c0","title":"References"},{"location":"refs/#reference","text":"","title":"Reference"},{"location":"refs/#sensorutilscore","text":"\u30bb\u30f3\u30b5\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e00\u822c\u7684\u306a\u64cd\u4f5c","title":"sensorutils.core"},{"location":"refs/#sensorutilsmetrics","text":"\u8a55\u4fa1\u6307\u6a19","title":"sensorutils.metrics"},{"location":"refs/#sensorutilsstats","text":"\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u7d71\u8a08\u5024\u306e\u8a08\u7b97","title":"sensorutils.stats"},{"location":"refs/#sensorutilsaugmentation","text":"\u30bb\u30f3\u30b5\u30c7\u30fc\u30bf\u5411\u3051\u306e\u30c7\u30fc\u30bf\u62e1\u5f35\u624b\u6cd5","title":"sensorutils.augmentation"},{"location":"refs/#sensorutilsdatasets","text":"\u884c\u52d5\u8a8d\u8b58\u7cfb\u306e\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30ed\u30fc\u30c0","title":"sensorutils.datasets"},{"location":"dev/","text":"FOR DEVELOPERS \u547d\u540d\u898f\u5247\u30fbdocstring \u306e\u66f8\u304d\u65b9 \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306b\u95a2\u3057\u3066 \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u8a18\u8ff0\u3059\u308b\u306b\u3042\u305f\u3063\u3066\u4ee5\u4e0b\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u5fc5\u8981 mkdocs mkdocs-material python-markdown-math mkdocstrings pytkdocs[numpy-style] \u30e2\u30b8\u30e5\u30fc\u30eb\u9593\u306e\u4f9d\u5b58\u95a2\u4fc2","title":"FOR DEVELOPERS"},{"location":"dev/#for-developers","text":"\u547d\u540d\u898f\u5247\u30fbdocstring \u306e\u66f8\u304d\u65b9 \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306b\u95a2\u3057\u3066 \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u8a18\u8ff0\u3059\u308b\u306b\u3042\u305f\u3063\u3066\u4ee5\u4e0b\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u5fc5\u8981 mkdocs mkdocs-material python-markdown-math mkdocstrings pytkdocs[numpy-style]","title":"FOR DEVELOPERS"},{"location":"dev/#_1","text":"","title":"\u30e2\u30b8\u30e5\u30fc\u30eb\u9593\u306e\u4f9d\u5b58\u95a2\u4fc2"},{"location":"dev/under_construction/","text":"UNDER CONSTRUCTION Note WORK IN PROGRESS","title":"UNDER CONSTRUCTION"},{"location":"dev/under_construction/#under-construction","text":"Note WORK IN PROGRESS","title":"UNDER CONSTRUCTION"},{"location":"refs/augmentation/","text":"sensorutils.augmentation jitter ( x , sigma = 0.05 ) jittering Parameters: Name Type Description Default x ndarray sensor data expected shape: (num_channels, length_of_sequence) required sigma float Noise scale 0.05 Returns: Type Description ndarray sensor data with jitter. scaling ( x , sigma = 0.1 ) scaling Parameters: Name Type Description Default x ndarray sensor data expected shape: (num_channels, length_of_sequence) required sigma float Standard deviation. Non-negative. 0.1 Returns: Type Description ndarray scaled sensor data swapping ( x ) swapping Parameters: Name Type Description Default x ndarray sensor data expected shape: (num_channels, length_of_sequence) required Returns: Type Description ndarray sensor data with randomly swapped axes flipping ( x , overall = True ) flipping Parameters: Name Type Description Default x ndarray sensor data expected shape: (num_channels, length_of_sequence) required overall bool flag whether all axes should be flipped together. True Returns: Type Description ndarray random flipped sensor data reversing ( x ) reversing Parameters: Name Type Description Default x ndarray sensor data expected shape: (num_channels, length_of_sequence) required Returns: Type Description ndarray reversed sensor data","title":"sensorutils.augmentation"},{"location":"refs/augmentation/#sensorutilsaugmentation","text":"","title":"sensorutils.augmentation"},{"location":"refs/augmentation/#sensorutils.augmentation.jitter","text":"jittering Parameters: Name Type Description Default x ndarray sensor data expected shape: (num_channels, length_of_sequence) required sigma float Noise scale 0.05 Returns: Type Description ndarray sensor data with jitter.","title":"jitter()"},{"location":"refs/augmentation/#sensorutils.augmentation.scaling","text":"scaling Parameters: Name Type Description Default x ndarray sensor data expected shape: (num_channels, length_of_sequence) required sigma float Standard deviation. Non-negative. 0.1 Returns: Type Description ndarray scaled sensor data","title":"scaling()"},{"location":"refs/augmentation/#sensorutils.augmentation.swapping","text":"swapping Parameters: Name Type Description Default x ndarray sensor data expected shape: (num_channels, length_of_sequence) required Returns: Type Description ndarray sensor data with randomly swapped axes","title":"swapping()"},{"location":"refs/augmentation/#sensorutils.augmentation.flipping","text":"flipping Parameters: Name Type Description Default x ndarray sensor data expected shape: (num_channels, length_of_sequence) required overall bool flag whether all axes should be flipped together. True Returns: Type Description ndarray random flipped sensor data","title":"flipping()"},{"location":"refs/augmentation/#sensorutils.augmentation.reversing","text":"reversing Parameters: Name Type Description Default x ndarray sensor data expected shape: (num_channels, length_of_sequence) required Returns: Type Description ndarray reversed sensor data","title":"reversing()"},{"location":"refs/core/","text":"sensorutils.core to_frames ( src , window_size , stride , stride_mode = 'index' ) np.ndarray\u3092\u30d5\u30ec\u30fc\u30e0\u5206\u3051\u3059\u308b\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u306a\u5b9f\u88c5\u3067\uff0c stride_mode \u3067\u5206\u5272\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\uff0e to_frames \u95a2\u6570\u306f to_frames_using_index \u95a2\u6570\uff0c to_frames_using_nptricks \u95a2\u6570\uff0c to_frames_using_reshape \u95a2\u6570\u3092\u9069\u5fdc\u7684\u306b\u4f7f\u3044\u5206\u3051\u308b\uff0e \u4f7f\u3044\u5206\u3051\u306f\u4ee5\u4e0b\u306e\u901a\u308a\uff0e window_size == stride -> to_frames_using_reshape window_size != stride and stride_mode == 'index' -> to_frames_using_index window_size != stride and stride_mode == 'nptrick' -> to_frames_using_nptricks Parameters: Name Type Description Default src ndarray splited source. required window_size int sliding window size. required stride int stride is int more than 0. required stride_mode str 'index' or 'nptrick'. it is used to_frames_* method when window_size != stride. 'index' Returns: Type Description ndarray a shape of frames is (num_frames, window_size, *src.shape[1:]) , where num_frames is (src.shape[0] - window_size) // stride + 1 . to_frames_using_reshape ( src , window_size ) np.ndarray\u3092\u30d5\u30ec\u30fc\u30e0\u5206\u3051\u3059\u308b\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u306a\u5b9f\u88c5\u3067\uff0c\u30a6\u30a3\u30f3\u30c9\u30a6\u30b5\u30a4\u30ba\u3068\u30b9\u30c8\u30e9\u30a4\u30c9\u5e45\u304c\u540c\u3058\u5834\u5408\u306b\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\uff0e \u5206\u5272\u306b np.reshape \u3092\u4f7f\u7528\u3057\u3066\u304a\u308a\uff0c\u975e\u5e38\u306b\u9ad8\u901f\u306asliding-window\u51e6\u7406\u3092\u5b9f\u884c\u53ef\u80fd\uff0e Parameters: Name Type Description Default src ndarray splited source. required window_size int sliding window size. stride = window_size. required Returns: Type Description ndarray a shape of frames is (num_frames, window_size, *src.shape[1:]) , where num_frames is (src.shape[0] - window_size) // window_size + 1 . to_frames_using_index ( src , window_size , stride ) np.ndarray \u3092\u30d5\u30ec\u30fc\u30e0\u5206\u3051\u3059\u308b\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u306a\u5b9f\u88c5\u3067\uff0c\u5206\u5272\u306bindexing\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\uff0e Parameters: Name Type Description Default src ndarray splited source. required window_size int sliding window size. required stride int stride is int more than 0. required Returns: Type Description ndarray a shape of frames is (num_frames, window_size, *src.shape[1:]) , where num_frames is (src.shape[0] - window_size) // stride + 1 . to_frames_using_nptricks ( src , window_size , stride ) np.ndarray \u3092\u30d5\u30ec\u30fc\u30e0\u5206\u3051\u3059\u308b\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u306a\u5b9f\u88c5\u3067\uff0c\u5206\u5272\u306b np.lib.stride_tricks.as_strided \u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u304a\u308a\uff0cindexing\u3092\u4f7f\u7528\u3059\u308b to_frames_using_index \u3088\u308a\u9ad8\u901f\u3067\u3042\u308b\uff0e Parameters: Name Type Description Default src ndarray splited source. required window_size int sliding window size. required stride int stride is int more than 0. required Returns: Type Description ndarray a shape of frames is (num_frames, window_size, *src.shape[1:]) , where num_frames is (src.shape[0] - window_size) // stride + 1 . split_using_sliding_window ( segment , ** options ) \u53ef\u5909\u30b5\u30a4\u30ba\u306esegment\u304b\u3089sliding-window\u65b9\u5f0f\u3067\u4e00\u5b9a\u30b5\u30a4\u30ba\u306e\u30d5\u30ec\u30fc\u30e0\u3092\u62bd\u51fa\u3059\u308b\uff0e \u5404shape\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\uff0e segment: (segment_size, ch) frames: (num_frames, window_size, ch) segment\u306e\u7b2c2\u8ef8(axis=1)\u4ee5\u964d\u306eshape\u306f\u4efb\u610f\u3067\u3042\u308a\uff0c \u4f8b\u3048\u3070shape\u304c(segment_size, ch1, ch2)\u306e\u30c7\u30fc\u30bf\u3092segment\u3068\u3057\u3066\u5165\u529b\u3059\u308b\u3068\uff0c (num_frames, window_size, ch1, ch2)\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\uff0e Parameters: Name Type Description Default segments np.ndarray \u5206\u5272\u5bfe\u8c61\u306e\u30c7\u30fc\u30bf required window_size int, default=512 \u30d5\u30ec\u30fc\u30e0\u5206\u3051\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u30b5\u30a4\u30ba required stride int, default=None stride\u304cNone\u306fwindow_size\u304c\u6307\u5b9a\u3055\u308c\u308b\uff0e required ftrim int \u6700\u521d\u306eftrim\u30b5\u30f3\u30d7\u30eb\u3092\u3068\u3070\u3059(default=5)\uff0e required btrim int \u6700\u5f8c\u306ebtrim\u30b5\u30f3\u30d7\u30eb\u3092\u3068\u3070\u3059(default=5)\uff0e required return_error_value None \u30a8\u30e9\u30fc\u306e\u6642\u306e\u8fd4\u308a\u5024 required Returns: Type Description ndarray sliding-window\u65b9\u5f0f\u3067\u62bd\u51fa\u4e0b\u30d5\u30ec\u30fc\u30e0 \u5931\u6557\u3057\u305f\u3089 return_error_value \u3067\u6307\u5b9a\u3055\u308c\u305f\u5024\u3092\u8fd4\u3059\uff0e split_using_target ( src , target ) target\u306e\u30c7\u30fc\u30bf\u3092\u5143\u306bsrc\u306e\u5206\u5272\u3092\u884c\u3046\uff0e Parameters: Name Type Description Default src ndarray \u5206\u5272\u3059\u308b\u30c7\u30fc\u30bf required target ndarray \u30e9\u30d9\u30eb\u30c7\u30fc\u30bf(\u4e00\u6b21\u5143\u914d\u5217) required Examples: >>> tgt = np . array ([ 0 , 0 , 1 , 1 , 2 , 2 , 1 ]) >>> src = np . array ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 ]) >>> splited = split_from_target ( src , tgt ) >>> >>> # splited == { >>> # 0: [np.array([1, 2])], >>> # 1: [np.array([3, 4]), np.array([7])], >>> # 2: [np.array([5, 6])] >>> # } Returns: Type Description Dict[int, List[numpy.ndarray]] key\u306f\u30e9\u30d9\u30eb\uff0cvalue\u306f\u30c7\u30fc\u30bf\u306e\u30ea\u30b9\u30c8\uff0e interpolate ( src , rate , kind = 'linear' , axis =- 1 ) interpolation function. Use scipy.interpolate.interp1d in this function. Parameters: Name Type Description Default src ndarray interpolation source. required rate int rate. required kind str Specifies the kind of interpolation as a string (\u2018linear\u2019, \u2018nearest\u2019, \u2018zero\u2019, \u2018slinear\u2019, \u2018quadratic\u2019, \u2018cubic\u2019, \u2018previous\u2019, \u2018next\u2019, where \u2018zero\u2019, \u2018slinear\u2019, \u2018quadratic\u2019 and \u2018cubic\u2019 refer to a spline interpolation of zeroth, first, second or third order; \u2018previous\u2019 and \u2018next\u2019 simply return the previous or next value of the point) or as an integer specifying the order of the spline interpolator to use. Default is \u2018linear\u2019. 'linear' axis int Specifies the axis of y along which to interpolate. Interpolation defaults to the last axis of y. -1 Examples: Linear interpolation 1 2 [0, 2, 4] - x2 -> [0, 1, 2, 3, 4] [0, 3, 6] - x3 -> [0, 1, 2, 3, 4, 5, 6] Returns: Type Description ndarray shape[axis] - 1 == rate * ft.shape[axis] pickle_dump ( obj , path ) object dump using pickle. Parameters: Name Type Description Default obj Any any object. required path Union[str, pathlib.Path] save path. required pickle_load ( path ) object load using pickle. Parameters: Name Type Description Default path Path a saved object pickle path. required","title":"sensorutils.core"},{"location":"refs/core/#sensorutilscore","text":"","title":"sensorutils.core"},{"location":"refs/core/#sensorutils.core.to_frames","text":"np.ndarray\u3092\u30d5\u30ec\u30fc\u30e0\u5206\u3051\u3059\u308b\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u306a\u5b9f\u88c5\u3067\uff0c stride_mode \u3067\u5206\u5272\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\uff0e to_frames \u95a2\u6570\u306f to_frames_using_index \u95a2\u6570\uff0c to_frames_using_nptricks \u95a2\u6570\uff0c to_frames_using_reshape \u95a2\u6570\u3092\u9069\u5fdc\u7684\u306b\u4f7f\u3044\u5206\u3051\u308b\uff0e \u4f7f\u3044\u5206\u3051\u306f\u4ee5\u4e0b\u306e\u901a\u308a\uff0e window_size == stride -> to_frames_using_reshape window_size != stride and stride_mode == 'index' -> to_frames_using_index window_size != stride and stride_mode == 'nptrick' -> to_frames_using_nptricks Parameters: Name Type Description Default src ndarray splited source. required window_size int sliding window size. required stride int stride is int more than 0. required stride_mode str 'index' or 'nptrick'. it is used to_frames_* method when window_size != stride. 'index' Returns: Type Description ndarray a shape of frames is (num_frames, window_size, *src.shape[1:]) , where num_frames is (src.shape[0] - window_size) // stride + 1 .","title":"to_frames()"},{"location":"refs/core/#sensorutils.core.to_frames_using_reshape","text":"np.ndarray\u3092\u30d5\u30ec\u30fc\u30e0\u5206\u3051\u3059\u308b\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u306a\u5b9f\u88c5\u3067\uff0c\u30a6\u30a3\u30f3\u30c9\u30a6\u30b5\u30a4\u30ba\u3068\u30b9\u30c8\u30e9\u30a4\u30c9\u5e45\u304c\u540c\u3058\u5834\u5408\u306b\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\uff0e \u5206\u5272\u306b np.reshape \u3092\u4f7f\u7528\u3057\u3066\u304a\u308a\uff0c\u975e\u5e38\u306b\u9ad8\u901f\u306asliding-window\u51e6\u7406\u3092\u5b9f\u884c\u53ef\u80fd\uff0e Parameters: Name Type Description Default src ndarray splited source. required window_size int sliding window size. stride = window_size. required Returns: Type Description ndarray a shape of frames is (num_frames, window_size, *src.shape[1:]) , where num_frames is (src.shape[0] - window_size) // window_size + 1 .","title":"to_frames_using_reshape()"},{"location":"refs/core/#sensorutils.core.to_frames_using_index","text":"np.ndarray \u3092\u30d5\u30ec\u30fc\u30e0\u5206\u3051\u3059\u308b\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u306a\u5b9f\u88c5\u3067\uff0c\u5206\u5272\u306bindexing\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\uff0e Parameters: Name Type Description Default src ndarray splited source. required window_size int sliding window size. required stride int stride is int more than 0. required Returns: Type Description ndarray a shape of frames is (num_frames, window_size, *src.shape[1:]) , where num_frames is (src.shape[0] - window_size) // stride + 1 .","title":"to_frames_using_index()"},{"location":"refs/core/#sensorutils.core.to_frames_using_nptricks","text":"np.ndarray \u3092\u30d5\u30ec\u30fc\u30e0\u5206\u3051\u3059\u308b\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u306a\u5b9f\u88c5\u3067\uff0c\u5206\u5272\u306b np.lib.stride_tricks.as_strided \u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u304a\u308a\uff0cindexing\u3092\u4f7f\u7528\u3059\u308b to_frames_using_index \u3088\u308a\u9ad8\u901f\u3067\u3042\u308b\uff0e Parameters: Name Type Description Default src ndarray splited source. required window_size int sliding window size. required stride int stride is int more than 0. required Returns: Type Description ndarray a shape of frames is (num_frames, window_size, *src.shape[1:]) , where num_frames is (src.shape[0] - window_size) // stride + 1 .","title":"to_frames_using_nptricks()"},{"location":"refs/core/#sensorutils.core.split_using_sliding_window","text":"\u53ef\u5909\u30b5\u30a4\u30ba\u306esegment\u304b\u3089sliding-window\u65b9\u5f0f\u3067\u4e00\u5b9a\u30b5\u30a4\u30ba\u306e\u30d5\u30ec\u30fc\u30e0\u3092\u62bd\u51fa\u3059\u308b\uff0e \u5404shape\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\uff0e segment: (segment_size, ch) frames: (num_frames, window_size, ch) segment\u306e\u7b2c2\u8ef8(axis=1)\u4ee5\u964d\u306eshape\u306f\u4efb\u610f\u3067\u3042\u308a\uff0c \u4f8b\u3048\u3070shape\u304c(segment_size, ch1, ch2)\u306e\u30c7\u30fc\u30bf\u3092segment\u3068\u3057\u3066\u5165\u529b\u3059\u308b\u3068\uff0c (num_frames, window_size, ch1, ch2)\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\uff0e Parameters: Name Type Description Default segments np.ndarray \u5206\u5272\u5bfe\u8c61\u306e\u30c7\u30fc\u30bf required window_size int, default=512 \u30d5\u30ec\u30fc\u30e0\u5206\u3051\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u30b5\u30a4\u30ba required stride int, default=None stride\u304cNone\u306fwindow_size\u304c\u6307\u5b9a\u3055\u308c\u308b\uff0e required ftrim int \u6700\u521d\u306eftrim\u30b5\u30f3\u30d7\u30eb\u3092\u3068\u3070\u3059(default=5)\uff0e required btrim int \u6700\u5f8c\u306ebtrim\u30b5\u30f3\u30d7\u30eb\u3092\u3068\u3070\u3059(default=5)\uff0e required return_error_value None \u30a8\u30e9\u30fc\u306e\u6642\u306e\u8fd4\u308a\u5024 required Returns: Type Description ndarray sliding-window\u65b9\u5f0f\u3067\u62bd\u51fa\u4e0b\u30d5\u30ec\u30fc\u30e0 \u5931\u6557\u3057\u305f\u3089 return_error_value \u3067\u6307\u5b9a\u3055\u308c\u305f\u5024\u3092\u8fd4\u3059\uff0e","title":"split_using_sliding_window()"},{"location":"refs/core/#sensorutils.core.split_using_target","text":"target\u306e\u30c7\u30fc\u30bf\u3092\u5143\u306bsrc\u306e\u5206\u5272\u3092\u884c\u3046\uff0e Parameters: Name Type Description Default src ndarray \u5206\u5272\u3059\u308b\u30c7\u30fc\u30bf required target ndarray \u30e9\u30d9\u30eb\u30c7\u30fc\u30bf(\u4e00\u6b21\u5143\u914d\u5217) required Examples: >>> tgt = np . array ([ 0 , 0 , 1 , 1 , 2 , 2 , 1 ]) >>> src = np . array ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 ]) >>> splited = split_from_target ( src , tgt ) >>> >>> # splited == { >>> # 0: [np.array([1, 2])], >>> # 1: [np.array([3, 4]), np.array([7])], >>> # 2: [np.array([5, 6])] >>> # } Returns: Type Description Dict[int, List[numpy.ndarray]] key\u306f\u30e9\u30d9\u30eb\uff0cvalue\u306f\u30c7\u30fc\u30bf\u306e\u30ea\u30b9\u30c8\uff0e","title":"split_using_target()"},{"location":"refs/core/#sensorutils.core.interpolate","text":"interpolation function. Use scipy.interpolate.interp1d in this function. Parameters: Name Type Description Default src ndarray interpolation source. required rate int rate. required kind str Specifies the kind of interpolation as a string (\u2018linear\u2019, \u2018nearest\u2019, \u2018zero\u2019, \u2018slinear\u2019, \u2018quadratic\u2019, \u2018cubic\u2019, \u2018previous\u2019, \u2018next\u2019, where \u2018zero\u2019, \u2018slinear\u2019, \u2018quadratic\u2019 and \u2018cubic\u2019 refer to a spline interpolation of zeroth, first, second or third order; \u2018previous\u2019 and \u2018next\u2019 simply return the previous or next value of the point) or as an integer specifying the order of the spline interpolator to use. Default is \u2018linear\u2019. 'linear' axis int Specifies the axis of y along which to interpolate. Interpolation defaults to the last axis of y. -1 Examples: Linear interpolation 1 2 [0, 2, 4] - x2 -> [0, 1, 2, 3, 4] [0, 3, 6] - x3 -> [0, 1, 2, 3, 4, 5, 6] Returns: Type Description ndarray shape[axis] - 1 == rate * ft.shape[axis]","title":"interpolate()"},{"location":"refs/core/#sensorutils.core.pickle_dump","text":"object dump using pickle. Parameters: Name Type Description Default obj Any any object. required path Union[str, pathlib.Path] save path. required","title":"pickle_dump()"},{"location":"refs/core/#sensorutils.core.pickle_load","text":"object load using pickle. Parameters: Name Type Description Default path Path a saved object pickle path. required","title":"pickle_load()"},{"location":"refs/datasets/","text":"sensorutils.datasets \u73fe\u5728\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u30ed\u30fc\u30c0\u306f\u4e0b\u8a18\u306e\u901a\u308a\u3067\u3059\uff0e HASC HHAR Opportunity PAMAP2 UCI Smartphone UniUib WISDM","title":"Dataset Loader"},{"location":"refs/datasets/#sensorutilsdatasets","text":"\u73fe\u5728\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u30ed\u30fc\u30c0\u306f\u4e0b\u8a18\u306e\u901a\u308a\u3067\u3059\uff0e HASC HHAR Opportunity PAMAP2 UCI Smartphone UniUib WISDM","title":"sensorutils.datasets"},{"location":"refs/metrics/","text":"sensorutils.metrics Note \u53ef\u80fd\u306a\u3089 sklearn.metrics \u3092\u4f7f\u7528\u3057\u305f\u307b\u3046\u304c\u826f\u3044 mae ( true , pred , axis = None ) Calc Mean Absolute Error. \\[ \\frac{1}{N}\\sum_{i=0}^{N} |\\hat{y}_i - y_i| \\] Parameters: Name Type Description Default true ndarray true data. required pred ndarray predicted data. required Returns: Type Description Union[float, numpy.ndarray] MAE mape ( true , pred , axis = None ) Calc Mean Absolute Persentage Error. \\[ \\frac{100}{N}\\sum_{i=0}^{N} \\left| \\frac{\\hat{y}_i - y_i}{y_i} \\right| \\] Parameters: Name Type Description Default true ndarray true data. required pred ndarray predicted data. required Returns: Type Description Union[float, numpy.ndarray] MAPE mse ( true , pred , axis = None ) Calc Mean Squared Error. \\[ \\frac{1}{N}\\sum_{i=0}^{N} (dst_i - src_i)^2 \\] Parameters: Name Type Description Default true ndarray true data. required pred ndarray predicted data. required Returns: Type Description Union[float, numpy.ndarray] MSE rmse ( true , pred , axis = None ) Calc Root Mean Squared Error. \\[ \\left(\\frac{1}{N}\\sum_{i=0}^{N} (\\hat{y}_i - y_i)^2 \\right)^{\\frac{1}{2}} \\] Parameters: Name Type Description Default true ndarray true data. required pred ndarray predicted data. required Returns: Type Description Union[float, numpy.ndarray] RMSE rmspe ( true , pred , axis = None ) Calc Root Mean Squared Persentage Error. \\[ 100 \\left(\\frac{1}{N}\\sum_{i=0}^{N} (\\frac{\\hat{y}_i - y_i}{y_i})^2 \\right)^{\\frac{1}{2}} \\] Parameters: Name Type Description Default true ndarray true data. required pred ndarray predicted data. required Returns: Type Description Union[float, numpy.ndarray] RMSPE rmsle ( true , pred , axis = None ) Calc root mean squared logarithmic error. \\[ \\left(\\frac{1}{N}\\sum_{i=0}^{N} (\\log (\\hat{y}_i + 1) - \\log (y_i + 1))^2 \\right)^{\\frac{1}{2}} \\] Parameters: Name Type Description Default true ndarray clean data required pred ndarray with noise required axis Optional[int] mean axis None Returns: Type Description Union[float, numpy.ndarray] RMSLE r2 ( true , pred ) Calc r2 score(coefficient of determination). \\[ {R^{2}}( \\hat{y} ) := 1 - \\frac{ \\frac{1}{N} \\sum_{i=1}^{N} { ( {y}_i - \\hat{y}_{i} ) }^{2} }{ \\frac{1}{N} \\sum_{i=1}^{N} { ( {y}_i - \\bar{y}) }^{2} } = 1 - \\frac{M S E(\\hat{y})}{Var(y)} \\] Parameters: Name Type Description Default true ndarray clean data required pred ndarray with noise required Returns: Type Description float coefficient of determination snr ( true , pred , axis = None ) Calc Signal to Noise Ratio. \\[ 10 \\log_{10} \\left(\\frac{\\sum_{i=0}^{N}true_i^2}{\\sum_{i=0}^{N}(true_i - pred_i)^2} \\right) \\] Parameters: Name Type Description Default true ndarray clean data required pred ndarray with noise required axis Optional[int] mean axis (default=None) None Returns: Type Description Union[float, numpy.ndarray] SNR lsd ( true_spec , pred_spec , axis = None ) Calc Log Spectral Distance. \\[ \\mathrm{LSD}(S(\\omega),\\tilde{S}(\\omega)) = \\sqrt{\\frac{1}{W}\\sum_{\\omega}^{W} \\left(20\\log_{10}\\left|\\frac{S(\\omega)}{\\tilde{S}(\\omega)}\\right|\\right)^2} \\] \\(S(\\omega)\\) \u3068 \\(\\tilde{S}(\\omega)\\) \u306f\uff0c\u305d\u308c\u305e\u308c\u539f\u6ce2\u5f62\u3068\u96d1\u97f3\u6291\u5727\u6ce2\u5f62\u306e\u5bfe\u6570\u30b9\u30da\u30af\u30c8\u30eb\uff0e \u8907\u6570\u306e\u77ed\u6642\u9593\u30b9\u30da\u30af\u30c8\u30eb\u306e\u8ddd\u96e2\u306f\u5404\u30b9\u30da\u30af\u30c8\u30eb\u3067\u8ddd\u96e2\u3092\u7b97\u51fa\u3057\u305f\u5f8c\uff0c\u5e73\u5747\u3092\u53d6\u308b\u3053\u3068\uff0e Parameters: Name Type Description Default true_spec ndarray spectral 1 required pred_spec ndarray spectral 2 required axis Optional[int] Not use None Returns: Type Description Union[float, numpy.ndarray] LSD","title":"sensorutils.metrics"},{"location":"refs/metrics/#sensorutilsmetrics","text":"Note \u53ef\u80fd\u306a\u3089 sklearn.metrics \u3092\u4f7f\u7528\u3057\u305f\u307b\u3046\u304c\u826f\u3044","title":"sensorutils.metrics"},{"location":"refs/metrics/#sensorutils.metrics.mae","text":"Calc Mean Absolute Error. \\[ \\frac{1}{N}\\sum_{i=0}^{N} |\\hat{y}_i - y_i| \\] Parameters: Name Type Description Default true ndarray true data. required pred ndarray predicted data. required Returns: Type Description Union[float, numpy.ndarray] MAE","title":"mae()"},{"location":"refs/metrics/#sensorutils.metrics.mape","text":"Calc Mean Absolute Persentage Error. \\[ \\frac{100}{N}\\sum_{i=0}^{N} \\left| \\frac{\\hat{y}_i - y_i}{y_i} \\right| \\] Parameters: Name Type Description Default true ndarray true data. required pred ndarray predicted data. required Returns: Type Description Union[float, numpy.ndarray] MAPE","title":"mape()"},{"location":"refs/metrics/#sensorutils.metrics.mse","text":"Calc Mean Squared Error. \\[ \\frac{1}{N}\\sum_{i=0}^{N} (dst_i - src_i)^2 \\] Parameters: Name Type Description Default true ndarray true data. required pred ndarray predicted data. required Returns: Type Description Union[float, numpy.ndarray] MSE","title":"mse()"},{"location":"refs/metrics/#sensorutils.metrics.rmse","text":"Calc Root Mean Squared Error. \\[ \\left(\\frac{1}{N}\\sum_{i=0}^{N} (\\hat{y}_i - y_i)^2 \\right)^{\\frac{1}{2}} \\] Parameters: Name Type Description Default true ndarray true data. required pred ndarray predicted data. required Returns: Type Description Union[float, numpy.ndarray] RMSE","title":"rmse()"},{"location":"refs/metrics/#sensorutils.metrics.rmspe","text":"Calc Root Mean Squared Persentage Error. \\[ 100 \\left(\\frac{1}{N}\\sum_{i=0}^{N} (\\frac{\\hat{y}_i - y_i}{y_i})^2 \\right)^{\\frac{1}{2}} \\] Parameters: Name Type Description Default true ndarray true data. required pred ndarray predicted data. required Returns: Type Description Union[float, numpy.ndarray] RMSPE","title":"rmspe()"},{"location":"refs/metrics/#sensorutils.metrics.rmsle","text":"Calc root mean squared logarithmic error. \\[ \\left(\\frac{1}{N}\\sum_{i=0}^{N} (\\log (\\hat{y}_i + 1) - \\log (y_i + 1))^2 \\right)^{\\frac{1}{2}} \\] Parameters: Name Type Description Default true ndarray clean data required pred ndarray with noise required axis Optional[int] mean axis None Returns: Type Description Union[float, numpy.ndarray] RMSLE","title":"rmsle()"},{"location":"refs/metrics/#sensorutils.metrics.r2","text":"Calc r2 score(coefficient of determination). \\[ {R^{2}}( \\hat{y} ) := 1 - \\frac{ \\frac{1}{N} \\sum_{i=1}^{N} { ( {y}_i - \\hat{y}_{i} ) }^{2} }{ \\frac{1}{N} \\sum_{i=1}^{N} { ( {y}_i - \\bar{y}) }^{2} } = 1 - \\frac{M S E(\\hat{y})}{Var(y)} \\] Parameters: Name Type Description Default true ndarray clean data required pred ndarray with noise required Returns: Type Description float coefficient of determination","title":"r2()"},{"location":"refs/metrics/#sensorutils.metrics.snr","text":"Calc Signal to Noise Ratio. \\[ 10 \\log_{10} \\left(\\frac{\\sum_{i=0}^{N}true_i^2}{\\sum_{i=0}^{N}(true_i - pred_i)^2} \\right) \\] Parameters: Name Type Description Default true ndarray clean data required pred ndarray with noise required axis Optional[int] mean axis (default=None) None Returns: Type Description Union[float, numpy.ndarray] SNR","title":"snr()"},{"location":"refs/metrics/#sensorutils.metrics.lsd","text":"Calc Log Spectral Distance. \\[ \\mathrm{LSD}(S(\\omega),\\tilde{S}(\\omega)) = \\sqrt{\\frac{1}{W}\\sum_{\\omega}^{W} \\left(20\\log_{10}\\left|\\frac{S(\\omega)}{\\tilde{S}(\\omega)}\\right|\\right)^2} \\] \\(S(\\omega)\\) \u3068 \\(\\tilde{S}(\\omega)\\) \u306f\uff0c\u305d\u308c\u305e\u308c\u539f\u6ce2\u5f62\u3068\u96d1\u97f3\u6291\u5727\u6ce2\u5f62\u306e\u5bfe\u6570\u30b9\u30da\u30af\u30c8\u30eb\uff0e \u8907\u6570\u306e\u77ed\u6642\u9593\u30b9\u30da\u30af\u30c8\u30eb\u306e\u8ddd\u96e2\u306f\u5404\u30b9\u30da\u30af\u30c8\u30eb\u3067\u8ddd\u96e2\u3092\u7b97\u51fa\u3057\u305f\u5f8c\uff0c\u5e73\u5747\u3092\u53d6\u308b\u3053\u3068\uff0e Parameters: Name Type Description Default true_spec ndarray spectral 1 required pred_spec ndarray spectral 2 required axis Optional[int] Not use None Returns: Type Description Union[float, numpy.ndarray] LSD","title":"lsd()"},{"location":"refs/stats/","text":"sensorutils.stats Note \u53ef\u80fd\u306a\u3089pandas\u306egoupby\u3084rolling\u95a2\u6570\u3092\u7528\u3044\u305f\u307b\u3046\u304c\u826f\u3044 autocorrelation ( data , k ) \u30e9\u30b0\u304ck\u306e\u81ea\u5df1\u76f8\u95a2\u3092\u6c42\u3081\u308b\uff0e \u6642\u7cfb\u5217\u30c7\u30fc\u30bf \\(S = \\{s_1, s_2, \\dots, s_n\\}\\) \u306b\u5bfe\u3057\u3066\uff0c\u30e9\u30b0 \\(k\\) \u3068\u3057\u3066 \\[ \\frac{\\mathrm{Cov}[s_i, s_{i-k}]}{\\sqrt{\\mathrm{Var}[s_i]\\mathrm{Var}[s_{i-k}]}} \\] Parameters: Name Type Description Default data ndarray \u4e00\u6b21\u5143\u30c7\u30fc\u30bf required k int \u30e9\u30b0 required Returns: Type Description ndarray \u30e9\u30b0k\u306e\u81ea\u5df1\u76f8\u95a2 correlation_rate ( data ) \u76f8\u95a2\u6bd4\u306e\u8a08\u7b97\u3092\u884c\u3046\uff0e \u30ab\u30c6\u30b4\u30ea \\(c\\) \u306b\u304a\u3051\u308b\u30b5\u30f3\u30d7\u30eb\u6570 \\(N_c\\) \uff0c\u5e73\u5747\u5024 \\(\\mu_c\\) \uff0ci\u756a\u76ee\u306e\u8981\u7d20 \\(x_{ci}\\) \uff0c\u307e\u305f\u5168\u3066\u306e\u30ab\u30c6\u30b4\u30ea\u3092\u542b\u3081\u305f\u5e73\u5747\u5024 \\(\\mu\\) \u3068\u3057\u3066\uff0c\u76f8\u95a2\u6bd4\u306f\u6b21\u5f0f\u3067\u8a08\u7b97\u3055\u308c\u308b\uff0e \\[ \\frac{\\sum_C N_c (\\mu_c - \\mu)^2}{\\sum_C \\sum_i^{N_c} (x_{ci} - \\mu_c)^2 + \\sum_C N_c (\\mu_c - \\mu)^2} \\] Parameters: Name Type Description Default data dict key = category val = List[src,...] required Returns: Type Description float \u76f8\u95a2\u6bd4 cv ( frame , axis = None ) \u5909\u52d5\u4fc2\u6570\u306e\u8a08\u7b97 Parameters: Name Type Description Default frame ndarray \u8a08\u7b97\u5bfe\u8c61\u306e\u30c7\u30fc\u30bf required axis Optional[int] \u8a08\u7b97\u5bfe\u8c61\u3068\u3059\u308b\u8ef8 None Returns: Type Description float \u5909\u52d5\u4fc2\u6570","title":"sensorutils.stats"},{"location":"refs/stats/#sensorutilsstats","text":"Note \u53ef\u80fd\u306a\u3089pandas\u306egoupby\u3084rolling\u95a2\u6570\u3092\u7528\u3044\u305f\u307b\u3046\u304c\u826f\u3044","title":"sensorutils.stats"},{"location":"refs/stats/#sensorutils.stats.autocorrelation","text":"\u30e9\u30b0\u304ck\u306e\u81ea\u5df1\u76f8\u95a2\u3092\u6c42\u3081\u308b\uff0e \u6642\u7cfb\u5217\u30c7\u30fc\u30bf \\(S = \\{s_1, s_2, \\dots, s_n\\}\\) \u306b\u5bfe\u3057\u3066\uff0c\u30e9\u30b0 \\(k\\) \u3068\u3057\u3066 \\[ \\frac{\\mathrm{Cov}[s_i, s_{i-k}]}{\\sqrt{\\mathrm{Var}[s_i]\\mathrm{Var}[s_{i-k}]}} \\] Parameters: Name Type Description Default data ndarray \u4e00\u6b21\u5143\u30c7\u30fc\u30bf required k int \u30e9\u30b0 required Returns: Type Description ndarray \u30e9\u30b0k\u306e\u81ea\u5df1\u76f8\u95a2","title":"autocorrelation()"},{"location":"refs/stats/#sensorutils.stats.correlation_rate","text":"\u76f8\u95a2\u6bd4\u306e\u8a08\u7b97\u3092\u884c\u3046\uff0e \u30ab\u30c6\u30b4\u30ea \\(c\\) \u306b\u304a\u3051\u308b\u30b5\u30f3\u30d7\u30eb\u6570 \\(N_c\\) \uff0c\u5e73\u5747\u5024 \\(\\mu_c\\) \uff0ci\u756a\u76ee\u306e\u8981\u7d20 \\(x_{ci}\\) \uff0c\u307e\u305f\u5168\u3066\u306e\u30ab\u30c6\u30b4\u30ea\u3092\u542b\u3081\u305f\u5e73\u5747\u5024 \\(\\mu\\) \u3068\u3057\u3066\uff0c\u76f8\u95a2\u6bd4\u306f\u6b21\u5f0f\u3067\u8a08\u7b97\u3055\u308c\u308b\uff0e \\[ \\frac{\\sum_C N_c (\\mu_c - \\mu)^2}{\\sum_C \\sum_i^{N_c} (x_{ci} - \\mu_c)^2 + \\sum_C N_c (\\mu_c - \\mu)^2} \\] Parameters: Name Type Description Default data dict key = category val = List[src,...] required Returns: Type Description float \u76f8\u95a2\u6bd4","title":"correlation_rate()"},{"location":"refs/stats/#sensorutils.stats.cv","text":"\u5909\u52d5\u4fc2\u6570\u306e\u8a08\u7b97 Parameters: Name Type Description Default frame ndarray \u8a08\u7b97\u5bfe\u8c61\u306e\u30c7\u30fc\u30bf required axis Optional[int] \u8a08\u7b97\u5bfe\u8c61\u3068\u3059\u308b\u8ef8 None Returns: Type Description float \u5909\u52d5\u4fc2\u6570","title":"cv()"},{"location":"refs/datasets/hasc/","text":"HASC Dataset Loader HASC HASC\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8(HASC-PAC2016)\u306b\u8a18\u9332\u3055\u308c\u3066\u3044\u308b\u30bb\u30f3\u30b5\u30c7\u30fc\u30bf\u3068\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\uff0e Parameters: Name Type Description Default path Path HASC\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30d1\u30b9\uff0eBasicActivity\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u89aa\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30d1\u30b9\u3092\u6307\u5b9a\u3059\u308b\uff0e required cache_dir_meta Optional[Path] \u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\uff0e \u4f55\u3082\u6307\u5b9a\u3055\u308c\u306a\u3044\u5834\u5408(cache_dir_meta=None)\uff0c\u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\u3092\u884c\u3046\u304c\uff0c\u30ad\u30e3\u30c3\u30b7\u30e5\u30d5\u30a1\u30a4\u30eb\u306f\u4f5c\u6210\u3057\u306a\u3044\uff0e \u30d5\u30a1\u30a4\u30eb\u540d\u304c\u6307\u5b9a\u3055\u308c\u305f\u5834\u5408\uff0c\u305d\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3059\u308c\u3070\u305d\u3053\u304b\u3089\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\uff0c\u5b58\u5728\u3057\u306a\u3051\u308c\u3070\u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\u3092\u884c\u3044\u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306b\u30c0\u30f3\u30d7\u3059\u308b\uff0e required load ( self , window_size , stride , ftrim = 0 , btrim = 0 , queries = None , y_labels = 'activity' ) HASC\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u307f\uff0csliding-window\u51e6\u7406\u3092\u884c\u3063\u305f\u30c7\u30fc\u30bf\u3092\u8fd4\u3059\uff0e \u3053\u3053\u3067\u306f3\u8ef8\u52a0\u901f\u5ea6\u30bb\u30f3\u30b5\u30c7\u30fc\u30bf\u306e\u307f\u3092\u6271\u3046\uff0e Parameters: Name Type Description Default window_size int \u30d5\u30ec\u30fc\u30e0\u5206\u3051\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u30b5\u30a4\u30ba required stride int \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u79fb\u52d5\u5e45 required ftrim int \u30bb\u30b0\u30e1\u30f3\u30c8\u5148\u982d\u306e\u30c8\u30ea\u30df\u30f3\u30b0\u30b5\u30a4\u30ba 0 btrim int \u30bb\u30b0\u30e1\u30f3\u30c8\u672b\u5c3e\u306e\u30c8\u30ea\u30df\u30f3\u30b0\u30b5\u30a4\u30ba 0 queries Optional[dict] \u30e1\u30bf\u60c5\u5831\u306b\u57fa\u3065\u3044\u3066\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3092\u884c\u3046\u305f\u3081\u306e\u30af\u30a8\u30ea\uff0e Key\u306f\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u306e\u30e9\u30d9\u30eb(Supported: Frequency, Height, Weight, Gender) Value\u306f\u30af\u30a8\u30ea\u6587\u5b57\u5217(DataFrame.query\u306b\u6e96\u62e0) \u8a73\u3057\u3044\u4f7f\u3044\u65b9\u306f\u5f8c\u8ff0\uff0e None y_labels Union[str, list] \u30bf\u30fc\u30b2\u30c3\u30c8\u30c7\u30fc\u30bf\u3068\u3057\u3066\u30ed\u30fc\u30c9\u3059\u308b\u30c7\u30fc\u30bf\u306e\u7a2e\u985e\u3092\u6307\u5b9a\uff0e list\u3067\u6307\u5b9a\u3057\u305f\u5834\u5408\uff0c\u305d\u306e\u9806\u5e8f\u304c\u8fd4\u3055\u308c\u308b\u30bf\u30fc\u30b2\u30c3\u30c8\u30e9\u30d9\u30eb\u306b\u3082\u53cd\u6620\u3055\u308c\u308b\uff0e \u30b5\u30dd\u30fc\u30c8\u3059\u308b\u7a2e\u985e\u306f\u4ee5\u4e0b\u306e\u901a\u308a(\u4eca\u5f8c\u62e1\u5f35\u4e88\u5b9a)\uff0e 'activity' 'frequency' 'gender' 'height' 'weight' 'person' 'activity' Examples: \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u30ec\u30fc\u30c8\u304c100Hz and \u8eab\u9577\u304c170cm\u3088\u308a\u5927\u304d\u3044 and \u4f53\u91cd\u304c100kg\u4ee5\u4e0a\u3067\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0 >>> hasc_path = Path ( '/path/to/dataset/HASC-PAC2016/' ) # HASC\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u30d1\u30b9 >>> hasc = HASC ( hasc_path , Path ( 'D:/datasets/HASC-PAC2016/BasicActivity/hasc.csv' )) >>> queries = { >>> 'Frequency' : 'Frequency == 100' , # \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u30ec\u30fc\u30c8\u304c100Hz\u306e\u30c7\u30fc\u30bf\u306e\u307f\u3092\u53d6\u5f97 >>> 'Height' : 'Height > 170' , # \u8eab\u9577\u304c170cm\u3088\u308a\u5927\u304d\u3044\u4eba >>> 'Weight' : 'Weight >= 100' , # \u4f53\u91cd\u304c100kg\u4ee5\u4e0a\u306e\u4eba >>> } >>> >>> y_labels = [ 'activity' , 'person' ] # \u30bf\u30fc\u30b2\u30c3\u30c8\u30e9\u30d9\u30eb\u3068\u3057\u3066acitivity\u3068person\u3092\u53d6\u308a\u51fa\u3059 >>> >>> # y\u306eaxis=1\u306b\u306factivity, person\u306e\u9806\u3067\u30bf\u30fc\u30b2\u30c3\u30c8\u30e9\u30d9\u30eb\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\uff0e >>> x , y , act2id = hasc . load ( window_size = 256 , stride = 256 , queries = queries , ftrim = 2 * 100 , btrim = 2 * 100 , y_labels = y_labels ) >>> >>> print ( f 'x: { x . shape } , y: { y . shape } ' ) >>> # > x: (?, 3, 256), y: (?, 2) Returns: Type Description Tuple[numpy.ndarray, numpy.ndarray] sliding-window\u3067\u5207\u308a\u51fa\u3057\u305f\u5165\u529b\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u30d5\u30ec\u30fc\u30e0\u30ea\u30b9\u30c8\uff0e x_frames\u306f3\u6b21\u5143\u914d\u5217\u3067\u69cb\u9020\u306f\u5927\u307e\u304b\u306b(Batch, Channels, Frame)\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e Channels\u306f\u52a0\u901f\u5ea6\u30bb\u30f3\u30b5\u306e\u8ef8\u3092\u8868\u3057\u3066\u304a\u308a\uff0c\u5148\u982d\u304b\u3089x, y, z\u3067\u3042\u308b\uff0e y_frames\u306fy_labels\u3067\u6307\u5b9a\u3057\u305f\u30bf\u30fc\u30b2\u30c3\u30c8\u30e9\u30d9\u30eb\u3067\u3042\u308a\uff0c y_frames(axis=1)\u306e\u30e9\u30d9\u30eb\u306e\u9806\u5e8f\u306fy_labels\u306e\u3082\u306e\u304c\u4fdd\u6301\u3055\u308c\u3066\u3044\u308b\uff0e load ( path , meta ) Function for loading HASC dataset Parameters: Name Type Description Default path Path Directory path of HASC dataset, which is parent directory of \"BasicActivity\" directory. required meta DataFrame meta data loaded by 'load_meta'. required Returns: Type Description Tuple[List[pandas.core.frame.DataFrame], pandas.core.frame.DataFrame] Sensor data segmented by activity and subject. load_meta ( path ) Function for loading meta data of HASC dataset Parameters: Name Type Description Default path Path Directory path of HASC dataset, which is parent directory of \"BasicActivity\" directory. required Returns: Type Description DataFrame meta data of HASC dataset. load_raw ( path , meta = None ) Function for loading raw data of HASC dataset Parameters: Name Type Description Default path Path Directory path of HASC dataset, which is parent directory of \"BasicActivity\" directory. required meta Optional[pandas.core.frame.DataFrame] meta data loaded by 'load_meta'. None Returns: Type Description Tuple[List[pandas.core.frame.DataFrame], pandas.core.frame.DataFrame] raw data of HASC dataset. Each item in 'data' is a part of dataset, which is splited by subject.","title":"HASC Dataset Loader"},{"location":"refs/datasets/hasc/#hasc-dataset-loader","text":"","title":"HASC Dataset Loader"},{"location":"refs/datasets/hasc/#sensorutils.datasets.hasc.HASC","text":"HASC\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8(HASC-PAC2016)\u306b\u8a18\u9332\u3055\u308c\u3066\u3044\u308b\u30bb\u30f3\u30b5\u30c7\u30fc\u30bf\u3068\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\uff0e Parameters: Name Type Description Default path Path HASC\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30d1\u30b9\uff0eBasicActivity\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u89aa\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u30d1\u30b9\u3092\u6307\u5b9a\u3059\u308b\uff0e required cache_dir_meta Optional[Path] \u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\uff0e \u4f55\u3082\u6307\u5b9a\u3055\u308c\u306a\u3044\u5834\u5408(cache_dir_meta=None)\uff0c\u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\u3092\u884c\u3046\u304c\uff0c\u30ad\u30e3\u30c3\u30b7\u30e5\u30d5\u30a1\u30a4\u30eb\u306f\u4f5c\u6210\u3057\u306a\u3044\uff0e \u30d5\u30a1\u30a4\u30eb\u540d\u304c\u6307\u5b9a\u3055\u308c\u305f\u5834\u5408\uff0c\u305d\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3059\u308c\u3070\u305d\u3053\u304b\u3089\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\uff0c\u5b58\u5728\u3057\u306a\u3051\u308c\u3070\u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\u3092\u884c\u3044\u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u306b\u30c0\u30f3\u30d7\u3059\u308b\uff0e required","title":"HASC"},{"location":"refs/datasets/hasc/#sensorutils.datasets.hasc.HASC.load","text":"HASC\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u307f\uff0csliding-window\u51e6\u7406\u3092\u884c\u3063\u305f\u30c7\u30fc\u30bf\u3092\u8fd4\u3059\uff0e \u3053\u3053\u3067\u306f3\u8ef8\u52a0\u901f\u5ea6\u30bb\u30f3\u30b5\u30c7\u30fc\u30bf\u306e\u307f\u3092\u6271\u3046\uff0e Parameters: Name Type Description Default window_size int \u30d5\u30ec\u30fc\u30e0\u5206\u3051\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u30b5\u30a4\u30ba required stride int \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u79fb\u52d5\u5e45 required ftrim int \u30bb\u30b0\u30e1\u30f3\u30c8\u5148\u982d\u306e\u30c8\u30ea\u30df\u30f3\u30b0\u30b5\u30a4\u30ba 0 btrim int \u30bb\u30b0\u30e1\u30f3\u30c8\u672b\u5c3e\u306e\u30c8\u30ea\u30df\u30f3\u30b0\u30b5\u30a4\u30ba 0 queries Optional[dict] \u30e1\u30bf\u60c5\u5831\u306b\u57fa\u3065\u3044\u3066\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3092\u884c\u3046\u305f\u3081\u306e\u30af\u30a8\u30ea\uff0e Key\u306f\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u306e\u30e9\u30d9\u30eb(Supported: Frequency, Height, Weight, Gender) Value\u306f\u30af\u30a8\u30ea\u6587\u5b57\u5217(DataFrame.query\u306b\u6e96\u62e0) \u8a73\u3057\u3044\u4f7f\u3044\u65b9\u306f\u5f8c\u8ff0\uff0e None y_labels Union[str, list] \u30bf\u30fc\u30b2\u30c3\u30c8\u30c7\u30fc\u30bf\u3068\u3057\u3066\u30ed\u30fc\u30c9\u3059\u308b\u30c7\u30fc\u30bf\u306e\u7a2e\u985e\u3092\u6307\u5b9a\uff0e list\u3067\u6307\u5b9a\u3057\u305f\u5834\u5408\uff0c\u305d\u306e\u9806\u5e8f\u304c\u8fd4\u3055\u308c\u308b\u30bf\u30fc\u30b2\u30c3\u30c8\u30e9\u30d9\u30eb\u306b\u3082\u53cd\u6620\u3055\u308c\u308b\uff0e \u30b5\u30dd\u30fc\u30c8\u3059\u308b\u7a2e\u985e\u306f\u4ee5\u4e0b\u306e\u901a\u308a(\u4eca\u5f8c\u62e1\u5f35\u4e88\u5b9a)\uff0e 'activity' 'frequency' 'gender' 'height' 'weight' 'person' 'activity' Examples: \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u30ec\u30fc\u30c8\u304c100Hz and \u8eab\u9577\u304c170cm\u3088\u308a\u5927\u304d\u3044 and \u4f53\u91cd\u304c100kg\u4ee5\u4e0a\u3067\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0 >>> hasc_path = Path ( '/path/to/dataset/HASC-PAC2016/' ) # HASC\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u30d1\u30b9 >>> hasc = HASC ( hasc_path , Path ( 'D:/datasets/HASC-PAC2016/BasicActivity/hasc.csv' )) >>> queries = { >>> 'Frequency' : 'Frequency == 100' , # \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u30ec\u30fc\u30c8\u304c100Hz\u306e\u30c7\u30fc\u30bf\u306e\u307f\u3092\u53d6\u5f97 >>> 'Height' : 'Height > 170' , # \u8eab\u9577\u304c170cm\u3088\u308a\u5927\u304d\u3044\u4eba >>> 'Weight' : 'Weight >= 100' , # \u4f53\u91cd\u304c100kg\u4ee5\u4e0a\u306e\u4eba >>> } >>> >>> y_labels = [ 'activity' , 'person' ] # \u30bf\u30fc\u30b2\u30c3\u30c8\u30e9\u30d9\u30eb\u3068\u3057\u3066acitivity\u3068person\u3092\u53d6\u308a\u51fa\u3059 >>> >>> # y\u306eaxis=1\u306b\u306factivity, person\u306e\u9806\u3067\u30bf\u30fc\u30b2\u30c3\u30c8\u30e9\u30d9\u30eb\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\uff0e >>> x , y , act2id = hasc . load ( window_size = 256 , stride = 256 , queries = queries , ftrim = 2 * 100 , btrim = 2 * 100 , y_labels = y_labels ) >>> >>> print ( f 'x: { x . shape } , y: { y . shape } ' ) >>> # > x: (?, 3, 256), y: (?, 2) Returns: Type Description Tuple[numpy.ndarray, numpy.ndarray] sliding-window\u3067\u5207\u308a\u51fa\u3057\u305f\u5165\u529b\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u30d5\u30ec\u30fc\u30e0\u30ea\u30b9\u30c8\uff0e x_frames\u306f3\u6b21\u5143\u914d\u5217\u3067\u69cb\u9020\u306f\u5927\u307e\u304b\u306b(Batch, Channels, Frame)\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e Channels\u306f\u52a0\u901f\u5ea6\u30bb\u30f3\u30b5\u306e\u8ef8\u3092\u8868\u3057\u3066\u304a\u308a\uff0c\u5148\u982d\u304b\u3089x, y, z\u3067\u3042\u308b\uff0e y_frames\u306fy_labels\u3067\u6307\u5b9a\u3057\u305f\u30bf\u30fc\u30b2\u30c3\u30c8\u30e9\u30d9\u30eb\u3067\u3042\u308a\uff0c y_frames(axis=1)\u306e\u30e9\u30d9\u30eb\u306e\u9806\u5e8f\u306fy_labels\u306e\u3082\u306e\u304c\u4fdd\u6301\u3055\u308c\u3066\u3044\u308b\uff0e","title":"load()"},{"location":"refs/datasets/hasc/#sensorutils.datasets.hasc.load","text":"Function for loading HASC dataset Parameters: Name Type Description Default path Path Directory path of HASC dataset, which is parent directory of \"BasicActivity\" directory. required meta DataFrame meta data loaded by 'load_meta'. required Returns: Type Description Tuple[List[pandas.core.frame.DataFrame], pandas.core.frame.DataFrame] Sensor data segmented by activity and subject.","title":"load()"},{"location":"refs/datasets/hasc/#sensorutils.datasets.hasc.load_meta","text":"Function for loading meta data of HASC dataset Parameters: Name Type Description Default path Path Directory path of HASC dataset, which is parent directory of \"BasicActivity\" directory. required Returns: Type Description DataFrame meta data of HASC dataset.","title":"load_meta()"},{"location":"refs/datasets/hasc/#sensorutils.datasets.hasc.load_raw","text":"Function for loading raw data of HASC dataset Parameters: Name Type Description Default path Path Directory path of HASC dataset, which is parent directory of \"BasicActivity\" directory. required meta Optional[pandas.core.frame.DataFrame] meta data loaded by 'load_meta'. None Returns: Type Description Tuple[List[pandas.core.frame.DataFrame], pandas.core.frame.DataFrame] raw data of HASC dataset. Each item in 'data' is a part of dataset, which is splited by subject.","title":"load_raw()"},{"location":"refs/datasets/hhar/","text":"HHAR Dataset Loader HHAR HHAR\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u8a18\u9332\u3055\u308c\u3066\u3044\u308b\u30bb\u30f3\u30b5\u30c7\u30fc\u30bf\u3068\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\uff0e Parameters: Name Type Description Default path Union[str,Path] HHAR\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30d1\u30b9\uff0e Phones_[accelerometer,gyroscope].csv, Watch_[accelerometer,gyroscope].csv\u304c\u7f6e\u304b\u308c\u3066\u3044\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30d1\u30b9\u3092\u6307\u5b9a\u3059\u308b\uff0e required load ( self , sensor_types , device_types , window_size , stride , subjects = None ) HHAR\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u307f\uff0csliding-window\u51e6\u7406\u3092\u884c\u3063\u305f\u30c7\u30fc\u30bf\u3092\u8fd4\u3059\uff0e Parameters: Name Type Description Default sensor_type \u30bb\u30f3\u30b5\u30bf\u30a4\u30d7\uff0e\"acceleromter\" or \"gyroscope\" required device_type \u30c7\u30d0\u30a4\u30b9\u30bf\u30a4\u30d7\uff0e\"Phone\" or \"Watch\" required window_size int \u30d5\u30ec\u30fc\u30e0\u5206\u3051\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u30b5\u30a4\u30ba required stride int \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u79fb\u52d5\u5e45 required subjects Optional[list] \u30ed\u30fc\u30c9\u3059\u308b\u88ab\u9a13\u8005\u3092\u6307\u5b9a\u3059\u308b\uff0e\u6307\u5b9a\u3055\u308c\u306a\u3044\u5834\u5408\u306f\u3059\u3079\u3066\u306e\u88ab\u9a13\u8005\u306e\u30c7\u30fc\u30bf\u3092\u8fd4\u3059\uff0e \u88ab\u9a13\u8005\u306f\u8a089\u540d\u304a\u308a\uff0c\u305d\u308c\u305e\u308c\u306b\u6587\u5b57\u5217\u306eID\u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u308b\uff0e \u88ab\u9a13\u8005ID: ['a','b','c','d','e','f','g','h','i'] None Examples: >>> hhar_path = Path ( 'path/to/dataset' ) >>> hhar = HHAR ( hhar_path ) >>> >>> # \u88ab\u9a13\u8005'a'\uff0c'b'\uff0c'c'\uff0c'd'\u306e\u307f\u3092\u8aad\u307f\u8fbc\u3080 >>> subjects = [ 'a' , 'b' , 'c' , 'd' ] >>> x , y = hhar . load ( sensor_types = 'accelerometer' , device_types = 'Watch' , window_size = 256 , stride = 128 , subjects = subjects ) >>> print ( f 'x: { x . shape } , y: { y . shape } ' ) >>> >>> # > x: (?, 3, 256), y: (?, 4) Returns: Type Description Tuple[numpy.ndarray, numpy.ndarray] sliding-window\u3067\u5207\u308a\u51fa\u3057\u305f\u5165\u529b\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u30d5\u30ec\u30fc\u30e0\u30ea\u30b9\u30c8 x_frames\u306f3\u6b21\u5143\u914d\u5217\u3067\u69cb\u9020\u306f\u5927\u307e\u304b\u306b(Batch, Channels, Frame)\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e Channels\u306f\u52a0\u901f\u5ea6\u30bb\u30f3\u30b5\u306e\u8ef8\u3092\u8868\u3057\u3066\u304a\u308a\uff0c\u5148\u982d\u304b\u3089x, y, z\u3067\u3042\u308b\uff0e y_frames\u306eshape\u306f(*, 4)\u3067\u3042\u308a\uff0caxis=1\u3067\u306fUser, Model, Device, Activity\u306e\u9806\u3067\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\uff0e y_frames\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5185\u306e\u5024\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\u305f\u3081\uff0c\u5206\u985e\u3067\u7528\u3044\u308b\u969b\u306f\u30e9\u30d9\u30eb\u306e\u518d\u5272\u308a\u5f53\u3066\u304c\u5fc5\u8981\u3068\u306a\u308b\u3053\u3068\u306b\u6ce8\u610f\u3059\u308b\uff0e load ( path , sensor_type , device_type = 'Watch' ) Function for loading HHAR dataset Parameters: Name Type Description Default path Path Directory path of HHAR dataset. required sensor_type str \"accelerometer\" or \"gyroscope\". required device_type str \"Watch\" or \"Phone\". 'Watch' Returns: Type Description Tuple[List[pandas.core.frame.DataFrame], List[pandas.core.frame.DataFrame]] Sensor data segmented by activity, subject, and device. load_raw ( path , sensor_type , device_type = 'Watch' ) Function for loading raw data of HHAR dataset Parameters: Name Type Description Default path Path Directory path of HHAR dataset. required sensor_type str \"accelerometer\" or \"gyroscope\". required device_type str \"Watch\" or \"Phone\". 'Watch' Returns: Type Description DataFrame raw data of HHAR dataset","title":"HHAR Dataset Loader"},{"location":"refs/datasets/hhar/#hhar-dataset-loader","text":"","title":"HHAR Dataset Loader"},{"location":"refs/datasets/hhar/#sensorutils.datasets.hhar.HHAR","text":"HHAR\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u8a18\u9332\u3055\u308c\u3066\u3044\u308b\u30bb\u30f3\u30b5\u30c7\u30fc\u30bf\u3068\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\uff0e Parameters: Name Type Description Default path Union[str,Path] HHAR\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30d1\u30b9\uff0e Phones_[accelerometer,gyroscope].csv, Watch_[accelerometer,gyroscope].csv\u304c\u7f6e\u304b\u308c\u3066\u3044\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30d1\u30b9\u3092\u6307\u5b9a\u3059\u308b\uff0e required","title":"HHAR"},{"location":"refs/datasets/hhar/#sensorutils.datasets.hhar.HHAR.load","text":"HHAR\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u307f\uff0csliding-window\u51e6\u7406\u3092\u884c\u3063\u305f\u30c7\u30fc\u30bf\u3092\u8fd4\u3059\uff0e Parameters: Name Type Description Default sensor_type \u30bb\u30f3\u30b5\u30bf\u30a4\u30d7\uff0e\"acceleromter\" or \"gyroscope\" required device_type \u30c7\u30d0\u30a4\u30b9\u30bf\u30a4\u30d7\uff0e\"Phone\" or \"Watch\" required window_size int \u30d5\u30ec\u30fc\u30e0\u5206\u3051\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u30b5\u30a4\u30ba required stride int \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u79fb\u52d5\u5e45 required subjects Optional[list] \u30ed\u30fc\u30c9\u3059\u308b\u88ab\u9a13\u8005\u3092\u6307\u5b9a\u3059\u308b\uff0e\u6307\u5b9a\u3055\u308c\u306a\u3044\u5834\u5408\u306f\u3059\u3079\u3066\u306e\u88ab\u9a13\u8005\u306e\u30c7\u30fc\u30bf\u3092\u8fd4\u3059\uff0e \u88ab\u9a13\u8005\u306f\u8a089\u540d\u304a\u308a\uff0c\u305d\u308c\u305e\u308c\u306b\u6587\u5b57\u5217\u306eID\u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u308b\uff0e \u88ab\u9a13\u8005ID: ['a','b','c','d','e','f','g','h','i'] None Examples: >>> hhar_path = Path ( 'path/to/dataset' ) >>> hhar = HHAR ( hhar_path ) >>> >>> # \u88ab\u9a13\u8005'a'\uff0c'b'\uff0c'c'\uff0c'd'\u306e\u307f\u3092\u8aad\u307f\u8fbc\u3080 >>> subjects = [ 'a' , 'b' , 'c' , 'd' ] >>> x , y = hhar . load ( sensor_types = 'accelerometer' , device_types = 'Watch' , window_size = 256 , stride = 128 , subjects = subjects ) >>> print ( f 'x: { x . shape } , y: { y . shape } ' ) >>> >>> # > x: (?, 3, 256), y: (?, 4) Returns: Type Description Tuple[numpy.ndarray, numpy.ndarray] sliding-window\u3067\u5207\u308a\u51fa\u3057\u305f\u5165\u529b\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u30d5\u30ec\u30fc\u30e0\u30ea\u30b9\u30c8 x_frames\u306f3\u6b21\u5143\u914d\u5217\u3067\u69cb\u9020\u306f\u5927\u307e\u304b\u306b(Batch, Channels, Frame)\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e Channels\u306f\u52a0\u901f\u5ea6\u30bb\u30f3\u30b5\u306e\u8ef8\u3092\u8868\u3057\u3066\u304a\u308a\uff0c\u5148\u982d\u304b\u3089x, y, z\u3067\u3042\u308b\uff0e y_frames\u306eshape\u306f(*, 4)\u3067\u3042\u308a\uff0caxis=1\u3067\u306fUser, Model, Device, Activity\u306e\u9806\u3067\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\uff0e y_frames\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5185\u306e\u5024\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\u305f\u3081\uff0c\u5206\u985e\u3067\u7528\u3044\u308b\u969b\u306f\u30e9\u30d9\u30eb\u306e\u518d\u5272\u308a\u5f53\u3066\u304c\u5fc5\u8981\u3068\u306a\u308b\u3053\u3068\u306b\u6ce8\u610f\u3059\u308b\uff0e","title":"load()"},{"location":"refs/datasets/hhar/#sensorutils.datasets.hhar.load","text":"Function for loading HHAR dataset Parameters: Name Type Description Default path Path Directory path of HHAR dataset. required sensor_type str \"accelerometer\" or \"gyroscope\". required device_type str \"Watch\" or \"Phone\". 'Watch' Returns: Type Description Tuple[List[pandas.core.frame.DataFrame], List[pandas.core.frame.DataFrame]] Sensor data segmented by activity, subject, and device.","title":"load()"},{"location":"refs/datasets/hhar/#sensorutils.datasets.hhar.load_raw","text":"Function for loading raw data of HHAR dataset Parameters: Name Type Description Default path Path Directory path of HHAR dataset. required sensor_type str \"accelerometer\" or \"gyroscope\". required device_type str \"Watch\" or \"Phone\". 'Watch' Returns: Type Description DataFrame raw data of HHAR dataset","title":"load_raw()"},{"location":"refs/datasets/opportunity/","text":"Opportunity Dataset Loader Opportunity Opportunity\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u8a18\u9332\u3055\u308c\u3066\u3044\u308b\u30bb\u30f3\u30b5\u30c7\u30fc\u30bf\u3068\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\uff0e Parameters: Name Type Description Default path Path Opportunity(UCI)\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30d1\u30b9\uff0e \"dataset\"\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u89aa\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u6307\u5b9a\u3059\u308b\uff0e required Attributes: Name Type Description NOT_SUPPORTED_LABELS List[str] \u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044\u30e9\u30d9\u30eb\u306e\u30ea\u30b9\u30c8 X_LABELS List[str] \u30bf\u30fc\u30b2\u30c3\u30c8\u4ee5\u5916\u306e\u3059\u3079\u3066\u306e\u30e9\u30d9\u30eb\u306e\u30ea\u30b9\u30c8 SUPPORTED_Y_LABELS List[str] \u30bf\u30fc\u30b2\u30c3\u30c8\u30e9\u30d9\u30eb\u306e\u30ea\u30b9\u30c8 load ( self , window_size , stride , x_labels = None , y_labels = None , ftrim_sec = 2 , btrim_sec = 2 ) Opportunity(UCI)\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u307f\uff0csliding-window\u51e6\u7406\u3092\u884c\u3063\u305f\u30c7\u30fc\u30bf\u3092\u8fd4\u3059\uff0e \u3053\u3053\u3067\u306fADL\u306e\u307f\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\uff0e Parameters: Name Type Description Default window_size int \u30d5\u30ec\u30fc\u30e0\u5206\u3051\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u30b5\u30a4\u30ba required stride int \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u79fb\u52d5\u5e45 required x_labels Optional[list] \u5165\u529b(\u5f93\u5c5e\u5909\u6570)\u306e\u30e9\u30d9\u30eb\u30ea\u30b9\u30c8(\u30e9\u30d9\u30eb\u540d\u306f\u5143\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u6e96\u62e0) \u3053\u3053\u3067\u6307\u5b9a\u3057\u305f\u30e9\u30d9\u30eb\u306e\u30c7\u30fc\u30bf\u304c\u5165\u529b\u3068\u3057\u3066\u53d6\u308a\u51fa\u3055\u308c\u308b\uff0e \u4e00\u90e8\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044\u30e9\u30d9\u30eb\u304c\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\uff0e None y_labels Optional[list] \u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u30e9\u30d9\u30eb\u30ea\u30b9\u30c8(\u4f7f\u7528\u65b9\u6cd5\u306fx_labels\u3068\u540c\u69d8)\uff0e None ftrim_sec int \u30bb\u30b0\u30e1\u30f3\u30c8\u5148\u982d\u306e\u30c8\u30ea\u30df\u30f3\u30b0\u30b5\u30a4\u30ba(\u5358\u4f4d\u306f\u79d2) 2 btrim_sec int \u30bb\u30b0\u30e1\u30f3\u30c8\u672b\u5c3e\u306e\u30c8\u30ea\u30df\u30f3\u30b0\u30b5\u30a4\u30ba(\u5358\u4f4d\u306f\u79d2) 2 Examples: >>> opportunity_path = Path ( 'path/to/dataset' ) >>> opportunity = Opportunity ( opportunity_path ) >>> >>> x_labels = [ >>> 'Accelerometer_RKN^_accX' , >>> 'Accelerometer_RKN^_accY' , >>> 'Accelerometer_RKN^_accZ' , >>> 'Accelerometer_HIP_accX' , >>> 'Accelerometer_HIP_accY' , >>> 'Accelerometer_HIP_accZ' , >>> ] >>> y_labels = [ 'Locomotion' , 'subject' ] # \u57fa\u672c\u884c\u52d5\u3068\u88ab\u9a13\u8005\u3092\u30bf\u30fc\u30b2\u30c3\u30c8\u30e9\u30d9\u30eb\u3068\u3057\u3066\u53d6\u308a\u51fa\u3059 >>> >>> x , y = opportunity . load ( window_size = 256 , stride = 256 , x_labels = xlabels , y_labels = ylabels , ftrim_sec = 2 , btrim_sec = 2 ) >>> print ( f 'x: { x . shape } , y: { y . shape } ' ) >>> >>> # > x: (?, 6, 256), y: (?, 2) Returns: Type Description Tuple[numpy.ndarray, numpy.ndarray] sliding-window\u3067\u5207\u308a\u51fa\u3057\u305f\u5165\u529b\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u30d5\u30ec\u30fc\u30e0\u30ea\u30b9\u30c8 x_frames\u306f3\u6b21\u5143\u914d\u5217\u3067\u69cb\u9020\u306f\u5927\u307e\u304b\u306b(Batch, Channels, Frame)\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e Channels\u306fx_labels\u3067\u6307\u5b9a\u3057\u305f\u3082\u306e\u304c\u683c\u7d0d\u3055\u308c\u308b\uff0e y_frames\u306f2\u6b21\u5143\u914d\u5217\u3067\u69cb\u9020\u306f\u5927\u307e\u304b\u306b(Batch, Labels)\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e Labels\u306fy_labels\u3067\u6307\u5b9a\u3057\u305f\u3082\u306e\u304c\u683c\u7d0d\u3055\u308c\u308b\uff0e y_frames\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5185\u306e\u5024\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\u305f\u3081\uff0c\u5206\u985e\u3067\u7528\u3044\u308b\u969b\u306f\u30e9\u30d9\u30eb\u306e\u518d\u5272\u308a\u5f53\u3066\u304c\u5fc5\u8981\u3068\u306a\u308b\u3053\u3068\u306b\u6ce8\u610f\u3059\u308b\uff0e load ( path ) Function for loading Opportunity dataset Parameters: Name Type Description Default path Path Directory path of Opportunity(UCI) dataset, which is parent directory of \"dataset\" directory. required Returns: Type Description Tuple[List[pandas.core.frame.DataFrame], List[pandas.core.frame.DataFrame]] Sensor data segmented by activity(Locomotion) and subject. load_raw ( path ) Function for loading raw data of Opportunity dataset Parameters: Name Type Description Default path Path Directory path of Opportunity(UCI) dataset, which is parent directory of \"dataset\" directory. required Returns: Type Description List[pandas.core.frame.DataFrame] Raw data of Opportunity dataset. Each item in 'chunks' is a part of dataset, which is splited by subject.","title":"Opportunity Dataset Loader"},{"location":"refs/datasets/opportunity/#opportunity-dataset-loader","text":"","title":"Opportunity Dataset Loader"},{"location":"refs/datasets/opportunity/#sensorutils.datasets.opportunity.Opportunity","text":"Opportunity\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u8a18\u9332\u3055\u308c\u3066\u3044\u308b\u30bb\u30f3\u30b5\u30c7\u30fc\u30bf\u3068\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\uff0e Parameters: Name Type Description Default path Path Opportunity(UCI)\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30d1\u30b9\uff0e \"dataset\"\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u89aa\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u6307\u5b9a\u3059\u308b\uff0e required Attributes: Name Type Description NOT_SUPPORTED_LABELS List[str] \u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044\u30e9\u30d9\u30eb\u306e\u30ea\u30b9\u30c8 X_LABELS List[str] \u30bf\u30fc\u30b2\u30c3\u30c8\u4ee5\u5916\u306e\u3059\u3079\u3066\u306e\u30e9\u30d9\u30eb\u306e\u30ea\u30b9\u30c8 SUPPORTED_Y_LABELS List[str] \u30bf\u30fc\u30b2\u30c3\u30c8\u30e9\u30d9\u30eb\u306e\u30ea\u30b9\u30c8","title":"Opportunity"},{"location":"refs/datasets/opportunity/#sensorutils.datasets.opportunity.Opportunity.load","text":"Opportunity(UCI)\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u307f\uff0csliding-window\u51e6\u7406\u3092\u884c\u3063\u305f\u30c7\u30fc\u30bf\u3092\u8fd4\u3059\uff0e \u3053\u3053\u3067\u306fADL\u306e\u307f\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\uff0e Parameters: Name Type Description Default window_size int \u30d5\u30ec\u30fc\u30e0\u5206\u3051\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u30b5\u30a4\u30ba required stride int \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u79fb\u52d5\u5e45 required x_labels Optional[list] \u5165\u529b(\u5f93\u5c5e\u5909\u6570)\u306e\u30e9\u30d9\u30eb\u30ea\u30b9\u30c8(\u30e9\u30d9\u30eb\u540d\u306f\u5143\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u6e96\u62e0) \u3053\u3053\u3067\u6307\u5b9a\u3057\u305f\u30e9\u30d9\u30eb\u306e\u30c7\u30fc\u30bf\u304c\u5165\u529b\u3068\u3057\u3066\u53d6\u308a\u51fa\u3055\u308c\u308b\uff0e \u4e00\u90e8\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044\u30e9\u30d9\u30eb\u304c\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\uff0e None y_labels Optional[list] \u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u30e9\u30d9\u30eb\u30ea\u30b9\u30c8(\u4f7f\u7528\u65b9\u6cd5\u306fx_labels\u3068\u540c\u69d8)\uff0e None ftrim_sec int \u30bb\u30b0\u30e1\u30f3\u30c8\u5148\u982d\u306e\u30c8\u30ea\u30df\u30f3\u30b0\u30b5\u30a4\u30ba(\u5358\u4f4d\u306f\u79d2) 2 btrim_sec int \u30bb\u30b0\u30e1\u30f3\u30c8\u672b\u5c3e\u306e\u30c8\u30ea\u30df\u30f3\u30b0\u30b5\u30a4\u30ba(\u5358\u4f4d\u306f\u79d2) 2 Examples: >>> opportunity_path = Path ( 'path/to/dataset' ) >>> opportunity = Opportunity ( opportunity_path ) >>> >>> x_labels = [ >>> 'Accelerometer_RKN^_accX' , >>> 'Accelerometer_RKN^_accY' , >>> 'Accelerometer_RKN^_accZ' , >>> 'Accelerometer_HIP_accX' , >>> 'Accelerometer_HIP_accY' , >>> 'Accelerometer_HIP_accZ' , >>> ] >>> y_labels = [ 'Locomotion' , 'subject' ] # \u57fa\u672c\u884c\u52d5\u3068\u88ab\u9a13\u8005\u3092\u30bf\u30fc\u30b2\u30c3\u30c8\u30e9\u30d9\u30eb\u3068\u3057\u3066\u53d6\u308a\u51fa\u3059 >>> >>> x , y = opportunity . load ( window_size = 256 , stride = 256 , x_labels = xlabels , y_labels = ylabels , ftrim_sec = 2 , btrim_sec = 2 ) >>> print ( f 'x: { x . shape } , y: { y . shape } ' ) >>> >>> # > x: (?, 6, 256), y: (?, 2) Returns: Type Description Tuple[numpy.ndarray, numpy.ndarray] sliding-window\u3067\u5207\u308a\u51fa\u3057\u305f\u5165\u529b\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u30d5\u30ec\u30fc\u30e0\u30ea\u30b9\u30c8 x_frames\u306f3\u6b21\u5143\u914d\u5217\u3067\u69cb\u9020\u306f\u5927\u307e\u304b\u306b(Batch, Channels, Frame)\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e Channels\u306fx_labels\u3067\u6307\u5b9a\u3057\u305f\u3082\u306e\u304c\u683c\u7d0d\u3055\u308c\u308b\uff0e y_frames\u306f2\u6b21\u5143\u914d\u5217\u3067\u69cb\u9020\u306f\u5927\u307e\u304b\u306b(Batch, Labels)\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e Labels\u306fy_labels\u3067\u6307\u5b9a\u3057\u305f\u3082\u306e\u304c\u683c\u7d0d\u3055\u308c\u308b\uff0e y_frames\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5185\u306e\u5024\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\u305f\u3081\uff0c\u5206\u985e\u3067\u7528\u3044\u308b\u969b\u306f\u30e9\u30d9\u30eb\u306e\u518d\u5272\u308a\u5f53\u3066\u304c\u5fc5\u8981\u3068\u306a\u308b\u3053\u3068\u306b\u6ce8\u610f\u3059\u308b\uff0e","title":"load()"},{"location":"refs/datasets/opportunity/#sensorutils.datasets.opportunity.load","text":"Function for loading Opportunity dataset Parameters: Name Type Description Default path Path Directory path of Opportunity(UCI) dataset, which is parent directory of \"dataset\" directory. required Returns: Type Description Tuple[List[pandas.core.frame.DataFrame], List[pandas.core.frame.DataFrame]] Sensor data segmented by activity(Locomotion) and subject.","title":"load()"},{"location":"refs/datasets/opportunity/#sensorutils.datasets.opportunity.load_raw","text":"Function for loading raw data of Opportunity dataset Parameters: Name Type Description Default path Path Directory path of Opportunity(UCI) dataset, which is parent directory of \"dataset\" directory. required Returns: Type Description List[pandas.core.frame.DataFrame] Raw data of Opportunity dataset. Each item in 'chunks' is a part of dataset, which is splited by subject.","title":"load_raw()"},{"location":"refs/datasets/pamap2/","text":"PAMAP2 Dataset Loader PAMAP2 PAMAP2\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u8a18\u9332\u3055\u308c\u3066\u3044\u308b\u30bb\u30f3\u30b5\u30c7\u30fc\u30bf\u3068\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\uff0e Parameters: Name Type Description Default path Path PAMAP2\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30d1\u30b9(path/to/dataset/PAMAP2_Dataset\"). required Attributes: Name Type Description supported_x_labels List[str] \u30bf\u30fc\u30b2\u30c3\u30c8\u4ee5\u5916\u306e\u3059\u3079\u3066\u306e\u30e9\u30d9\u30eb\u306e\u30ea\u30b9\u30c8 supported_y_labels List[str] \u30bf\u30fc\u30b2\u30c3\u30c8\u30e9\u30d9\u30eb\u306e\u30ea\u30b9\u30c8 load ( self , window_size , stride , x_labels = None , y_labels = None , ftrim_sec = 10 , btrim_sec = 10 , persons = None , norm = False ) PAMAP2\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u307f\uff0csliding-window\u51e6\u7406\u3092\u884c\u3063\u305f\u30c7\u30fc\u30bf\u3092\u8fd4\u3059\uff0e Parameters: Name Type Description Default window_size int \u30d5\u30ec\u30fc\u30e0\u5206\u3051\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u30b5\u30a4\u30ba required stride int \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u79fb\u52d5\u5e45 required x_labels Optional[list] \u5165\u529b(\u5f93\u5c5e\u5909\u6570)\u306e\u30e9\u30d9\u30eb\u30ea\u30b9\u30c8(\u30e9\u30d9\u30eb\u540d\u306f\u5143\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u6e96\u62e0)\uff0e\u3053\u3053\u3067\u6307\u5b9a\u3057\u305f\u30e9\u30d9\u30eb\u306e\u30c7\u30fc\u30bf\u304c\u5165\u529b\u3068\u3057\u3066\u53d6\u308a\u51fa\u3055\u308c\u308b\uff0e None y_labels Optional[list] \u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u30e9\u30d9\u30eb\u30ea\u30b9\u30c8(\u4ed5\u69d8\u306fx_labels\u3068\u540c\u69d8) None ftrim_sec int \u30bb\u30b0\u30e1\u30f3\u30c8\u5148\u982d\u306e\u30c8\u30ea\u30df\u30f3\u30b0\u30b5\u30a4\u30ba(\u5358\u4f4d\u306f\u79d2) 10 btrim_sec int \u30bb\u30b0\u30e1\u30f3\u30c8\u672b\u5c3e\u306e\u30c8\u30ea\u30df\u30f3\u30b0\u30b5\u30a4\u30ba(\u5358\u4f4d\u306f\u79d2) 10 persons Optional[list] \u30ed\u30fc\u30c9\u3059\u308b\u88ab\u9a13\u8005\u3092\u6307\u5b9a\u3059\u308b\uff0e\u6307\u5b9a\u3055\u308c\u306a\u3044\u5834\u5408\u306f\u3059\u3079\u3066\u306e\u88ab\u9a13\u8005\u306e\u30c7\u30fc\u30bf\u3092\u8fd4\u3059\uff0e \u88ab\u9a13\u8005\u306f\u8a089\u540d\u304a\u308a\uff0c\u305d\u308c\u305e\u308c\u306b\u6587\u5b57\u5217\u306eID\u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u308b\uff0e \u88ab\u9a13\u8005ID: ['subject101', 'subject102', 'subject103', 'subject104', 'subject105', 'subject106', 'subject107', 'subject108', 'subject109'] None norm bool (beta) \u30bb\u30f3\u30b5\u30c7\u30fc\u30bf\u306e\u6a19\u6e96\u5316\u3092\u884c\u3046\u304b\u3069\u3046\u304b\u306e\u30d5\u30e9\u30b0\uff0e \u3053\u306e\u6a5f\u80fd\u306f\u3042\u307e\u308a\u78ba\u8a8d\u304c\u3067\u304d\u3066\u3044\u306a\u3044\u306e\u3067\uff0c\u4f7f\u7528\u3059\u308b\u969b\u306f\u6ce8\u610f\u3092\u6255\u3046\u3053\u3068\uff0e False Examples: >>> pamap2_path = Path ( 'path/to/dataset/PAMAP2_Dataset/' ) >>> pamap2 = PAMAP2 ( pamap2_path ) >>> >>> x_labels = [ 'IMU_chest_acc1_x' , 'IMU_chest_acc1_y' , 'IMU_chest_acc1_z' ] >>> y_labels = [ 'activity_id' ] >>> subjects = [ 'subject101' , 'subject102' , 'subject103' ] >>> x , y = pamap2 . load ( window_size = 256 , stride = 128 , x_labels = xlabels , y_labels = y_labels , ftrim_sec = 2 , btrim_sec = 2 , persons = subjects ) >>> print ( f 'x: { x . shape } , y: { y . shape } ' ) >>> >>> # > x: (?, 3, 256), y: (?, 1) Returns: Type Description Tuple[numpy.ndarray, numpy.ndarray] sliding-window\u3067\u5207\u308a\u51fa\u3057\u305f\u5165\u529b\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u30d5\u30ec\u30fc\u30e0\u30ea\u30b9\u30c8 x_frames\u306f3\u6b21\u5143\u914d\u5217\u3067\u69cb\u9020\u306f\u5927\u307e\u304b\u306b(Batch, Channels, Frame)\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e Channels\u306fx_labels\u3067\u6307\u5b9a\u3057\u305f\u3082\u306e\u304c\u683c\u7d0d\u3055\u308c\u308b\uff0e y_frames\u306f2\u6b21\u5143\u914d\u5217\u3067\u69cb\u9020\u306f\u5927\u307e\u304b\u306b(Batch, Labels)\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e Labels\u306fy_labels\u3067\u6307\u5b9a\u3057\u305f\u3082\u306e\u304c\u683c\u7d0d\u3055\u308c\u308b\uff0e y_frames\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5185\u306e\u5024\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\u305f\u3081\uff0c\u5206\u985e\u3067\u7528\u3044\u308b\u969b\u306f\u30e9\u30d9\u30eb\u306e\u518d\u5272\u308a\u5f53\u3066\u304c\u5fc5\u8981\u3068\u306a\u308b\u3053\u3068\u306b\u6ce8\u610f\u3059\u308b\uff0e load ( path ) Function for loading PAMAP2 dataset Parameters: Name Type Description Default path Path Directory path of PAMAP2 dataset. required Returns: Type Description Tuple[List[pandas.core.frame.DataFrame], List[pandas.core.frame.DataFrame]] Sensor data segmented by activity and subject. load_raw ( path ) Function for loading raw data of PAMAP2 dataset Parameters: Name Type Description Default path Path Directory path of PAMAP2 dataset(\"PAMAP2_Dataset\"). required Returns: Type Description List[pandas.core.frame.DataFrame] Raw data of PAMAP2 dataset. Each item in 'chunks_per_persons' is a part of dataset, which is splited by subject.","title":"PAMAP2 Dataset Loader"},{"location":"refs/datasets/pamap2/#pamap2-dataset-loader","text":"","title":"PAMAP2 Dataset Loader"},{"location":"refs/datasets/pamap2/#sensorutils.datasets.pamap2.PAMAP2","text":"PAMAP2\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u8a18\u9332\u3055\u308c\u3066\u3044\u308b\u30bb\u30f3\u30b5\u30c7\u30fc\u30bf\u3068\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\uff0e Parameters: Name Type Description Default path Path PAMAP2\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30d1\u30b9(path/to/dataset/PAMAP2_Dataset\"). required Attributes: Name Type Description supported_x_labels List[str] \u30bf\u30fc\u30b2\u30c3\u30c8\u4ee5\u5916\u306e\u3059\u3079\u3066\u306e\u30e9\u30d9\u30eb\u306e\u30ea\u30b9\u30c8 supported_y_labels List[str] \u30bf\u30fc\u30b2\u30c3\u30c8\u30e9\u30d9\u30eb\u306e\u30ea\u30b9\u30c8","title":"PAMAP2"},{"location":"refs/datasets/pamap2/#sensorutils.datasets.pamap2.PAMAP2.load","text":"PAMAP2\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u307f\uff0csliding-window\u51e6\u7406\u3092\u884c\u3063\u305f\u30c7\u30fc\u30bf\u3092\u8fd4\u3059\uff0e Parameters: Name Type Description Default window_size int \u30d5\u30ec\u30fc\u30e0\u5206\u3051\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u30b5\u30a4\u30ba required stride int \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u79fb\u52d5\u5e45 required x_labels Optional[list] \u5165\u529b(\u5f93\u5c5e\u5909\u6570)\u306e\u30e9\u30d9\u30eb\u30ea\u30b9\u30c8(\u30e9\u30d9\u30eb\u540d\u306f\u5143\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u6e96\u62e0)\uff0e\u3053\u3053\u3067\u6307\u5b9a\u3057\u305f\u30e9\u30d9\u30eb\u306e\u30c7\u30fc\u30bf\u304c\u5165\u529b\u3068\u3057\u3066\u53d6\u308a\u51fa\u3055\u308c\u308b\uff0e None y_labels Optional[list] \u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u30e9\u30d9\u30eb\u30ea\u30b9\u30c8(\u4ed5\u69d8\u306fx_labels\u3068\u540c\u69d8) None ftrim_sec int \u30bb\u30b0\u30e1\u30f3\u30c8\u5148\u982d\u306e\u30c8\u30ea\u30df\u30f3\u30b0\u30b5\u30a4\u30ba(\u5358\u4f4d\u306f\u79d2) 10 btrim_sec int \u30bb\u30b0\u30e1\u30f3\u30c8\u672b\u5c3e\u306e\u30c8\u30ea\u30df\u30f3\u30b0\u30b5\u30a4\u30ba(\u5358\u4f4d\u306f\u79d2) 10 persons Optional[list] \u30ed\u30fc\u30c9\u3059\u308b\u88ab\u9a13\u8005\u3092\u6307\u5b9a\u3059\u308b\uff0e\u6307\u5b9a\u3055\u308c\u306a\u3044\u5834\u5408\u306f\u3059\u3079\u3066\u306e\u88ab\u9a13\u8005\u306e\u30c7\u30fc\u30bf\u3092\u8fd4\u3059\uff0e \u88ab\u9a13\u8005\u306f\u8a089\u540d\u304a\u308a\uff0c\u305d\u308c\u305e\u308c\u306b\u6587\u5b57\u5217\u306eID\u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u308b\uff0e \u88ab\u9a13\u8005ID: ['subject101', 'subject102', 'subject103', 'subject104', 'subject105', 'subject106', 'subject107', 'subject108', 'subject109'] None norm bool (beta) \u30bb\u30f3\u30b5\u30c7\u30fc\u30bf\u306e\u6a19\u6e96\u5316\u3092\u884c\u3046\u304b\u3069\u3046\u304b\u306e\u30d5\u30e9\u30b0\uff0e \u3053\u306e\u6a5f\u80fd\u306f\u3042\u307e\u308a\u78ba\u8a8d\u304c\u3067\u304d\u3066\u3044\u306a\u3044\u306e\u3067\uff0c\u4f7f\u7528\u3059\u308b\u969b\u306f\u6ce8\u610f\u3092\u6255\u3046\u3053\u3068\uff0e False Examples: >>> pamap2_path = Path ( 'path/to/dataset/PAMAP2_Dataset/' ) >>> pamap2 = PAMAP2 ( pamap2_path ) >>> >>> x_labels = [ 'IMU_chest_acc1_x' , 'IMU_chest_acc1_y' , 'IMU_chest_acc1_z' ] >>> y_labels = [ 'activity_id' ] >>> subjects = [ 'subject101' , 'subject102' , 'subject103' ] >>> x , y = pamap2 . load ( window_size = 256 , stride = 128 , x_labels = xlabels , y_labels = y_labels , ftrim_sec = 2 , btrim_sec = 2 , persons = subjects ) >>> print ( f 'x: { x . shape } , y: { y . shape } ' ) >>> >>> # > x: (?, 3, 256), y: (?, 1) Returns: Type Description Tuple[numpy.ndarray, numpy.ndarray] sliding-window\u3067\u5207\u308a\u51fa\u3057\u305f\u5165\u529b\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u30d5\u30ec\u30fc\u30e0\u30ea\u30b9\u30c8 x_frames\u306f3\u6b21\u5143\u914d\u5217\u3067\u69cb\u9020\u306f\u5927\u307e\u304b\u306b(Batch, Channels, Frame)\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e Channels\u306fx_labels\u3067\u6307\u5b9a\u3057\u305f\u3082\u306e\u304c\u683c\u7d0d\u3055\u308c\u308b\uff0e y_frames\u306f2\u6b21\u5143\u914d\u5217\u3067\u69cb\u9020\u306f\u5927\u307e\u304b\u306b(Batch, Labels)\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e Labels\u306fy_labels\u3067\u6307\u5b9a\u3057\u305f\u3082\u306e\u304c\u683c\u7d0d\u3055\u308c\u308b\uff0e y_frames\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5185\u306e\u5024\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\u305f\u3081\uff0c\u5206\u985e\u3067\u7528\u3044\u308b\u969b\u306f\u30e9\u30d9\u30eb\u306e\u518d\u5272\u308a\u5f53\u3066\u304c\u5fc5\u8981\u3068\u306a\u308b\u3053\u3068\u306b\u6ce8\u610f\u3059\u308b\uff0e","title":"load()"},{"location":"refs/datasets/pamap2/#sensorutils.datasets.pamap2.load","text":"Function for loading PAMAP2 dataset Parameters: Name Type Description Default path Path Directory path of PAMAP2 dataset. required Returns: Type Description Tuple[List[pandas.core.frame.DataFrame], List[pandas.core.frame.DataFrame]] Sensor data segmented by activity and subject.","title":"load()"},{"location":"refs/datasets/pamap2/#sensorutils.datasets.pamap2.load_raw","text":"Function for loading raw data of PAMAP2 dataset Parameters: Name Type Description Default path Path Directory path of PAMAP2 dataset(\"PAMAP2_Dataset\"). required Returns: Type Description List[pandas.core.frame.DataFrame] Raw data of PAMAP2 dataset. Each item in 'chunks_per_persons' is a part of dataset, which is splited by subject.","title":"load_raw()"},{"location":"refs/datasets/ucihar/","text":"UCI Smartphone Dataset Loader UCIHAR UCI Smartphone\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u8a18\u9332\u3055\u308c\u3066\u3044\u308b\u30bb\u30f3\u30b5\u30c7\u30fc\u30bf\u3068\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\uff0e Parameters: Name Type Description Default path Path UCI Smartphone\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30d1\u30b9\uff0e 'train'\u3068'test'\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u7f6e\u304b\u308c\u3066\u3044\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u6307\u5b9a\u3059\u308b\uff0e required load ( self , train = True , person_list = None , include_gravity = True ) UCI Smartphone\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u307f\uff0csliding-window\u51e6\u7406\u3092\u884c\u3063\u305f\u30c7\u30fc\u30bf\u3092\u8fd4\u3059\uff0e Parameters: Name Type Description Default train bool \u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u3069\u3061\u3089\u3092\u8aad\u307f\u8fbc\u3080\u304b\u9078\u629e\u3059\u308b\uff0e (Caution) \u3053\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u4eca\u5f8c\u5ec3\u6b62\u3059\u308b\u4e88\u5b9a\uff0e True person_list Optional[list] \u30ed\u30fc\u30c9\u3059\u308b\u88ab\u9a13\u8005\u3092\u6307\u5b9a\u3059\u308b\uff0e\u6307\u5b9a\u3055\u308c\u306a\u3044\u5834\u5408\u306f\u3059\u3079\u3066\u306e\u88ab\u9a13\u8005\u306e\u30c7\u30fc\u30bf\u3092\u8fd4\u3059\uff0e \u88ab\u9a13\u8005\u306f\u8a089\u540d\u304a\u308a\uff0c\u305d\u308c\u305e\u308c\u306b\u6574\u6570\u306eID\u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u308b\uff0e None include_gravity bool \u59ff\u52e2\u60c5\u5831(\u7b2c0\u5468\u6ce2\u6570\u6210\u5206)\u3092\u542b\u3080\u304b\u3069\u3046\u304b\u306e\u30d5\u30e9\u30b0\uff0e True Examples: >>> ucihar_path = Path ( 'path/to/dataset' ) >>> ucihar = UCIHAR ( ucihar_path ) >>> >>> person_list = [ 1 , 2 , 5 , 7 , 9 ] >>> x , y = ucihar . load ( train = True , person_list = person_list , include_gravity = True ) >>> print ( f 'x: { x . shape } , y: { y . shape } ' ) >>> >>> # > x: (?, 3, 128), y: (?, 3) Returns: Type Description Tuple[numpy.ndarray, numpy.ndarray] sliding-window\u3067\u5207\u308a\u51fa\u3057\u305f\u5165\u529b\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u30d5\u30ec\u30fc\u30e0\u30ea\u30b9\u30c8 x_frames\u306f3\u6b21\u5143\u914d\u5217\u3067\u69cb\u9020\u306f\u5927\u307e\u304b\u306b(Batch, Channels, Frame)\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e Channels\u306f\u52a0\u901f\u5ea6\u30bb\u30f3\u30b5\u306e\u8ef8\u3092\u8868\u3057\u3066\u304a\u308a\uff0c\u5148\u982d\u304b\u3089x, y, z\u3067\u3042\u308b\uff0e y_frames\u306f2\u6b21\u5143\u914d\u5217\u3067\u69cb\u9020\u306f\u5927\u307e\u304b\u306b(Batch, Labels)\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e Labels\u306f\u5148\u982d\u304b\u3089activity\uff0csubject\uff0ctrain\u30d5\u30e9\u30b0\u3092\u8868\u3057\u3066\u3044\u308b\uff0e y_frames\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5185\u306e\u5024\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\u305f\u3081\uff0c\u5206\u985e\u3067\u7528\u3044\u308b\u969b\u306f\u30e9\u30d9\u30eb\u306e\u518d\u5272\u308a\u5f53\u3066\u304c\u5fc5\u8981\u3068\u306a\u308b\u3053\u3068\u306b\u6ce8\u610f\u3059\u308b\uff0e load ( path , include_gravity ) Function for loading UCI Smartphone dataset Parameters: Name Type Description Default path Path Directory path of UCI Smartphone dataset. required Returns: Type Description Tuple[List[pandas.core.frame.DataFrame], pandas.core.frame.DataFrame] Sensor data segmented by activity and subject. load_meta ( path ) Function for loading meta data of UCI Smartphone dataset Parameters: Name Type Description Default path Path Directory path of UCI Smartphone dataset, which includes 'train' and 'test' directory. required Returns: Type Description DataFrame meta data of HASC dataset. load_raw ( path , include_gravity ) Function for loading raw data of UCI Smartphone dataset Parameters: Name Type Description Default path Path Directory path of UCI Smartphone dataset, which includes 'train' and 'test' directory. required include_gravity bool Flag whether attitude information (0th frequency component) is included. required Returns: Type Description Tuple[numpy.ndarray, pandas.core.frame.DataFrame] raw data of UCI Smartphone dataset Shape of sensor_data is (?, 3, 128).","title":"UCI Smartphone Dataset Loader"},{"location":"refs/datasets/ucihar/#uci-smartphone-dataset-loader","text":"","title":"UCI Smartphone Dataset Loader"},{"location":"refs/datasets/ucihar/#sensorutils.datasets.ucihar.UCIHAR","text":"UCI Smartphone\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u8a18\u9332\u3055\u308c\u3066\u3044\u308b\u30bb\u30f3\u30b5\u30c7\u30fc\u30bf\u3068\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\uff0e Parameters: Name Type Description Default path Path UCI Smartphone\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30d1\u30b9\uff0e 'train'\u3068'test'\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u7f6e\u304b\u308c\u3066\u3044\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u6307\u5b9a\u3059\u308b\uff0e required","title":"UCIHAR"},{"location":"refs/datasets/ucihar/#sensorutils.datasets.ucihar.UCIHAR.load","text":"UCI Smartphone\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u307f\uff0csliding-window\u51e6\u7406\u3092\u884c\u3063\u305f\u30c7\u30fc\u30bf\u3092\u8fd4\u3059\uff0e Parameters: Name Type Description Default train bool \u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u3069\u3061\u3089\u3092\u8aad\u307f\u8fbc\u3080\u304b\u9078\u629e\u3059\u308b\uff0e (Caution) \u3053\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u4eca\u5f8c\u5ec3\u6b62\u3059\u308b\u4e88\u5b9a\uff0e True person_list Optional[list] \u30ed\u30fc\u30c9\u3059\u308b\u88ab\u9a13\u8005\u3092\u6307\u5b9a\u3059\u308b\uff0e\u6307\u5b9a\u3055\u308c\u306a\u3044\u5834\u5408\u306f\u3059\u3079\u3066\u306e\u88ab\u9a13\u8005\u306e\u30c7\u30fc\u30bf\u3092\u8fd4\u3059\uff0e \u88ab\u9a13\u8005\u306f\u8a089\u540d\u304a\u308a\uff0c\u305d\u308c\u305e\u308c\u306b\u6574\u6570\u306eID\u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u308b\uff0e None include_gravity bool \u59ff\u52e2\u60c5\u5831(\u7b2c0\u5468\u6ce2\u6570\u6210\u5206)\u3092\u542b\u3080\u304b\u3069\u3046\u304b\u306e\u30d5\u30e9\u30b0\uff0e True Examples: >>> ucihar_path = Path ( 'path/to/dataset' ) >>> ucihar = UCIHAR ( ucihar_path ) >>> >>> person_list = [ 1 , 2 , 5 , 7 , 9 ] >>> x , y = ucihar . load ( train = True , person_list = person_list , include_gravity = True ) >>> print ( f 'x: { x . shape } , y: { y . shape } ' ) >>> >>> # > x: (?, 3, 128), y: (?, 3) Returns: Type Description Tuple[numpy.ndarray, numpy.ndarray] sliding-window\u3067\u5207\u308a\u51fa\u3057\u305f\u5165\u529b\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u30d5\u30ec\u30fc\u30e0\u30ea\u30b9\u30c8 x_frames\u306f3\u6b21\u5143\u914d\u5217\u3067\u69cb\u9020\u306f\u5927\u307e\u304b\u306b(Batch, Channels, Frame)\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e Channels\u306f\u52a0\u901f\u5ea6\u30bb\u30f3\u30b5\u306e\u8ef8\u3092\u8868\u3057\u3066\u304a\u308a\uff0c\u5148\u982d\u304b\u3089x, y, z\u3067\u3042\u308b\uff0e y_frames\u306f2\u6b21\u5143\u914d\u5217\u3067\u69cb\u9020\u306f\u5927\u307e\u304b\u306b(Batch, Labels)\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e Labels\u306f\u5148\u982d\u304b\u3089activity\uff0csubject\uff0ctrain\u30d5\u30e9\u30b0\u3092\u8868\u3057\u3066\u3044\u308b\uff0e y_frames\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5185\u306e\u5024\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\u305f\u3081\uff0c\u5206\u985e\u3067\u7528\u3044\u308b\u969b\u306f\u30e9\u30d9\u30eb\u306e\u518d\u5272\u308a\u5f53\u3066\u304c\u5fc5\u8981\u3068\u306a\u308b\u3053\u3068\u306b\u6ce8\u610f\u3059\u308b\uff0e","title":"load()"},{"location":"refs/datasets/ucihar/#sensorutils.datasets.ucihar.load","text":"Function for loading UCI Smartphone dataset Parameters: Name Type Description Default path Path Directory path of UCI Smartphone dataset. required Returns: Type Description Tuple[List[pandas.core.frame.DataFrame], pandas.core.frame.DataFrame] Sensor data segmented by activity and subject.","title":"load()"},{"location":"refs/datasets/ucihar/#sensorutils.datasets.ucihar.load_meta","text":"Function for loading meta data of UCI Smartphone dataset Parameters: Name Type Description Default path Path Directory path of UCI Smartphone dataset, which includes 'train' and 'test' directory. required Returns: Type Description DataFrame meta data of HASC dataset.","title":"load_meta()"},{"location":"refs/datasets/ucihar/#sensorutils.datasets.ucihar.load_raw","text":"Function for loading raw data of UCI Smartphone dataset Parameters: Name Type Description Default path Path Directory path of UCI Smartphone dataset, which includes 'train' and 'test' directory. required include_gravity bool Flag whether attitude information (0th frequency component) is included. required Returns: Type Description Tuple[numpy.ndarray, pandas.core.frame.DataFrame] raw data of UCI Smartphone dataset Shape of sensor_data is (?, 3, 128).","title":"load_raw()"},{"location":"refs/datasets/unimib/","text":"UniMib SHAR Dataset Loader UniMib UniMib SHAR\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u8a18\u9332\u3055\u308c\u3066\u3044\u308b\u30bb\u30f3\u30b5\u30c7\u30fc\u30bf\u3068\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\uff0e Parameters: Name Type Description Default path Path UniMib SHAR\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30d1\u30b9(path/to/dataset/data)\uff0e required load ( self , data_type , window_size = None , stride = None , ftrim_sec = 3 , btrim_sec = 3 , subjects = None ) UniMib SHAR\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u307f\uff0csliding-window\u51e6\u7406\u3092\u884c\u3063\u305f\u30c7\u30fc\u30bf\u3092\u8fd4\u3059\uff0e Parameters: Name Type Description Default data_type str \u30ed\u30fc\u30c9\u3059\u308b\u30c7\u30fc\u30bf\u306e\u7a2e\u985e(adl, fall, full, raw)\u3092\u9078\u629e\u3059\u308b(full = adl + fall)\uff0e raw\u306f\u524d\u51e6\u7406\u6e08\u307f\u30c7\u30fc\u30bf\u3067\u306f\u306a\u3044\u751f\u306e\u30c7\u30fc\u30bf\u3092\u6271\u3046\uff0e required window_size Optional[int] \u30d5\u30ec\u30fc\u30e0\u5206\u3051\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u30b5\u30a4\u30ba data_type != 'raw'\u306e\u5834\u5408\u306f\u5f37\u5236\u7684\u306b151\u3068\u306a\u308b\u304c\uff0c data_type == 'raw'\u306e\u5834\u5408\u306f\u5fc5\u305a\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\uff0e None stride Optional[int] \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u79fb\u52d5\u5e45 data_type != 'raw'\u306e\u5834\u5408\u306f\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u304c\uff0c data_type == 'raw'\u306e\u5834\u5408\u306f\u5fc5\u305a\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\uff0e None ftrim_sec int \u30bb\u30b0\u30e1\u30f3\u30c8\u5148\u982d\u306e\u30c8\u30ea\u30df\u30f3\u30b0\u30b5\u30a4\u30ba(\u5358\u4f4d\u306f\u79d2) 3 btrim_sec int \u30bb\u30b0\u30e1\u30f3\u30c8\u672b\u5c3e\u306e\u30c8\u30ea\u30df\u30f3\u30b0\u30b5\u30a4\u30ba(\u5358\u4f4d\u306f\u79d2) 3 subjects Optional[list] \u30ed\u30fc\u30c9\u3059\u308b\u88ab\u9a13\u8005\u3092\u6307\u5b9a\u3059\u308b\uff0e\u6307\u5b9a\u3055\u308c\u306a\u3044\u5834\u5408\u306f\u3059\u3079\u3066\u306e\u88ab\u9a13\u8005\u306e\u30c7\u30fc\u30bf\u3092\u8fd4\u3059\uff0e \u88ab\u9a13\u8005\u306f\u8a089\u540d\u304a\u308a\uff0c\u305d\u308c\u305e\u308c\u306b\u6574\u6570\u306eID\u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u308b\uff0e \u88ab\u9a13\u8005ID: [1, 2, ..., 30] None Examples: >>> unimib_path = Path ( 'path/to/dataset' ) >>> unimib = UniMib ( unimib_path ) >>> >>> subjects = [ 1 , 2 , 3 ] >>> >>> x , y = unimib . load ( data_type = 'full' , subjects = subjects ) >>> print ( 'full - x: {} , y: {} ' . format ( x . shape , y . shape )) >>> # > full - x: (?, 3, 151), y: (?, 2) >>> >>> x , y = unimib . load ( data_type = 'raw' , window_size = 64 , stride = 64 , ftrim_sec = 0 , btrim_sec = 0 , subjects = subjects ) >>> print ( 'raw - x: {} , y: {} ' . format ( x . shape , y . shape )) >>> # > raw - x: (?, 3, 64), y: (?, 2) Returns: Type Description Tuple[numpy.ndarray, numpy.ndarray] sliding-window\u3067\u5207\u308a\u51fa\u3057\u305f\u5165\u529b\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u30d5\u30ec\u30fc\u30e0\u30ea\u30b9\u30c8 x_frames\u306f3\u6b21\u5143\u914d\u5217\u3067\u69cb\u9020\u306f\u5927\u307e\u304b\u306b(Batch, Channels, Frame)\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e Channels\u306f\u52a0\u901f\u5ea6\u30bb\u30f3\u30b5\u306e\u8ef8\u3092\u8868\u3057\u3066\u304a\u308a\uff0c\u5148\u982d\u304b\u3089x, y, z\u3067\u3042\u308b\uff0e \u307e\u305f\uff0c\u3053\u306e\u30ed\u30fc\u30c0\u306fdata_type\u306b\u3088\u3063\u3066window_size\u306e\u6319\u52d5\u304c\u5909\u308f\u308a\uff0c data_type != 'raw'\u306e\u5834\u5408\u306fwindow_size\u306f\u5f37\u5236\u7684\u306b151\u3068\u306a\u308b\uff0e y_frames\u306f2\u6b21\u5143\u914d\u5217\u3067\u69cb\u9020\u306f\u5927\u307e\u304b\u306b(Batch, Labels)\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e Labels\u306f\u5148\u982d\u304b\u3089activity\uff0csubject\u3092\u8868\u3057\u3066\u3044\u308b\uff0e y_frames\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5185\u306e\u5024\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\u305f\u3081\uff0c\u5206\u985e\u3067\u7528\u3044\u308b\u969b\u306f\u30e9\u30d9\u30eb\u306e\u518d\u5272\u308a\u5f53\u3066\u304c\u5fc5\u8981\u3068\u306a\u308b\u3053\u3068\u306b\u6ce8\u610f\u3059\u308b\uff0e load ( path , data_type = 'full' ) Function for loading UniMib SHAR dataset Parameters: Name Type Description Default path Path Directory path of UniMib SHAR dataset('data' directory). required Returns: Type Description Tuple[List[pandas.core.frame.DataFrame], pandas.core.frame.DataFrame] Sensor data segmented by activity and subject. load_raw ( path , data_type = 'full' ) Function for loading raw data of UniMib SHAR dataset Parameters: Name Type Description Default path Path Directory path of UniMib SHAR dataset('data' directory). required data_type str Data type 'full': segmented sensor data which contain all activities 'adl' : segmented sensor data which contain ADL activities 'fall': segmented sensor data which contain fall activities 'raw' : raw sensor data (not segmented, all activities) 'full'","title":"UniMib SHAR Dataset Loader"},{"location":"refs/datasets/unimib/#unimib-shar-dataset-loader","text":"","title":"UniMib SHAR Dataset Loader"},{"location":"refs/datasets/unimib/#sensorutils.datasets.unimib.UniMib","text":"UniMib SHAR\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u8a18\u9332\u3055\u308c\u3066\u3044\u308b\u30bb\u30f3\u30b5\u30c7\u30fc\u30bf\u3068\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\uff0e Parameters: Name Type Description Default path Path UniMib SHAR\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30d1\u30b9(path/to/dataset/data)\uff0e required","title":"UniMib"},{"location":"refs/datasets/unimib/#sensorutils.datasets.unimib.UniMib.load","text":"UniMib SHAR\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u307f\uff0csliding-window\u51e6\u7406\u3092\u884c\u3063\u305f\u30c7\u30fc\u30bf\u3092\u8fd4\u3059\uff0e Parameters: Name Type Description Default data_type str \u30ed\u30fc\u30c9\u3059\u308b\u30c7\u30fc\u30bf\u306e\u7a2e\u985e(adl, fall, full, raw)\u3092\u9078\u629e\u3059\u308b(full = adl + fall)\uff0e raw\u306f\u524d\u51e6\u7406\u6e08\u307f\u30c7\u30fc\u30bf\u3067\u306f\u306a\u3044\u751f\u306e\u30c7\u30fc\u30bf\u3092\u6271\u3046\uff0e required window_size Optional[int] \u30d5\u30ec\u30fc\u30e0\u5206\u3051\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u30b5\u30a4\u30ba data_type != 'raw'\u306e\u5834\u5408\u306f\u5f37\u5236\u7684\u306b151\u3068\u306a\u308b\u304c\uff0c data_type == 'raw'\u306e\u5834\u5408\u306f\u5fc5\u305a\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\uff0e None stride Optional[int] \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u79fb\u52d5\u5e45 data_type != 'raw'\u306e\u5834\u5408\u306f\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u304c\uff0c data_type == 'raw'\u306e\u5834\u5408\u306f\u5fc5\u305a\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\uff0e None ftrim_sec int \u30bb\u30b0\u30e1\u30f3\u30c8\u5148\u982d\u306e\u30c8\u30ea\u30df\u30f3\u30b0\u30b5\u30a4\u30ba(\u5358\u4f4d\u306f\u79d2) 3 btrim_sec int \u30bb\u30b0\u30e1\u30f3\u30c8\u672b\u5c3e\u306e\u30c8\u30ea\u30df\u30f3\u30b0\u30b5\u30a4\u30ba(\u5358\u4f4d\u306f\u79d2) 3 subjects Optional[list] \u30ed\u30fc\u30c9\u3059\u308b\u88ab\u9a13\u8005\u3092\u6307\u5b9a\u3059\u308b\uff0e\u6307\u5b9a\u3055\u308c\u306a\u3044\u5834\u5408\u306f\u3059\u3079\u3066\u306e\u88ab\u9a13\u8005\u306e\u30c7\u30fc\u30bf\u3092\u8fd4\u3059\uff0e \u88ab\u9a13\u8005\u306f\u8a089\u540d\u304a\u308a\uff0c\u305d\u308c\u305e\u308c\u306b\u6574\u6570\u306eID\u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u308b\uff0e \u88ab\u9a13\u8005ID: [1, 2, ..., 30] None Examples: >>> unimib_path = Path ( 'path/to/dataset' ) >>> unimib = UniMib ( unimib_path ) >>> >>> subjects = [ 1 , 2 , 3 ] >>> >>> x , y = unimib . load ( data_type = 'full' , subjects = subjects ) >>> print ( 'full - x: {} , y: {} ' . format ( x . shape , y . shape )) >>> # > full - x: (?, 3, 151), y: (?, 2) >>> >>> x , y = unimib . load ( data_type = 'raw' , window_size = 64 , stride = 64 , ftrim_sec = 0 , btrim_sec = 0 , subjects = subjects ) >>> print ( 'raw - x: {} , y: {} ' . format ( x . shape , y . shape )) >>> # > raw - x: (?, 3, 64), y: (?, 2) Returns: Type Description Tuple[numpy.ndarray, numpy.ndarray] sliding-window\u3067\u5207\u308a\u51fa\u3057\u305f\u5165\u529b\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u30d5\u30ec\u30fc\u30e0\u30ea\u30b9\u30c8 x_frames\u306f3\u6b21\u5143\u914d\u5217\u3067\u69cb\u9020\u306f\u5927\u307e\u304b\u306b(Batch, Channels, Frame)\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e Channels\u306f\u52a0\u901f\u5ea6\u30bb\u30f3\u30b5\u306e\u8ef8\u3092\u8868\u3057\u3066\u304a\u308a\uff0c\u5148\u982d\u304b\u3089x, y, z\u3067\u3042\u308b\uff0e \u307e\u305f\uff0c\u3053\u306e\u30ed\u30fc\u30c0\u306fdata_type\u306b\u3088\u3063\u3066window_size\u306e\u6319\u52d5\u304c\u5909\u308f\u308a\uff0c data_type != 'raw'\u306e\u5834\u5408\u306fwindow_size\u306f\u5f37\u5236\u7684\u306b151\u3068\u306a\u308b\uff0e y_frames\u306f2\u6b21\u5143\u914d\u5217\u3067\u69cb\u9020\u306f\u5927\u307e\u304b\u306b(Batch, Labels)\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e Labels\u306f\u5148\u982d\u304b\u3089activity\uff0csubject\u3092\u8868\u3057\u3066\u3044\u308b\uff0e y_frames\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5185\u306e\u5024\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\u305f\u3081\uff0c\u5206\u985e\u3067\u7528\u3044\u308b\u969b\u306f\u30e9\u30d9\u30eb\u306e\u518d\u5272\u308a\u5f53\u3066\u304c\u5fc5\u8981\u3068\u306a\u308b\u3053\u3068\u306b\u6ce8\u610f\u3059\u308b\uff0e","title":"load()"},{"location":"refs/datasets/unimib/#sensorutils.datasets.unimib.load","text":"Function for loading UniMib SHAR dataset Parameters: Name Type Description Default path Path Directory path of UniMib SHAR dataset('data' directory). required Returns: Type Description Tuple[List[pandas.core.frame.DataFrame], pandas.core.frame.DataFrame] Sensor data segmented by activity and subject.","title":"load()"},{"location":"refs/datasets/unimib/#sensorutils.datasets.unimib.load_raw","text":"Function for loading raw data of UniMib SHAR dataset Parameters: Name Type Description Default path Path Directory path of UniMib SHAR dataset('data' directory). required data_type str Data type 'full': segmented sensor data which contain all activities 'adl' : segmented sensor data which contain ADL activities 'fall': segmented sensor data which contain fall activities 'raw' : raw sensor data (not segmented, all activities) 'full'","title":"load_raw()"},{"location":"refs/datasets/wisdm/","text":"WISDM Dataset Loader WISDM WISDM\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u8a18\u9332\u3055\u308c\u3066\u3044\u308b\u30bb\u30f3\u30b5\u30c7\u30fc\u30bf\u3068\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\uff0e Parameters: Name Type Description Default path Path WISDM\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30d1\u30b9\uff0e required load ( self , window_size , stride , ftrim_sec = 3 , btrim_sec = 3 , subjects = None ) WISDM\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u307f\uff0csliding-window\u51e6\u7406\u3092\u884c\u3063\u305f\u30c7\u30fc\u30bf\u3092\u8fd4\u3059\uff0e Parameters: Name Type Description Default window_size int \u30d5\u30ec\u30fc\u30e0\u5206\u3051\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u30b5\u30a4\u30ba required stride int \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u79fb\u52d5\u5e45 required ftrim_sec int \u30bb\u30b0\u30e1\u30f3\u30c8\u5148\u982d\u306e\u30c8\u30ea\u30df\u30f3\u30b0\u30b5\u30a4\u30ba(\u5358\u4f4d\u306f\u79d2) 3 btrim_sec int \u30bb\u30b0\u30e1\u30f3\u30c8\u672b\u5c3e\u306e\u30c8\u30ea\u30df\u30f3\u30b0\u30b5\u30a4\u30ba(\u5358\u4f4d\u306f\u79d2) 3 subjects Optional[list] \u30ed\u30fc\u30c9\u3059\u308b\u88ab\u9a13\u8005\u3092\u6307\u5b9a\u3059\u308b\uff0e\u6307\u5b9a\u3055\u308c\u306a\u3044\u5834\u5408\u306f\u3059\u3079\u3066\u306e\u88ab\u9a13\u8005\u306e\u30c7\u30fc\u30bf\u3092\u8fd4\u3059\uff0e \u88ab\u9a13\u8005\u306f\u8a0836\u540d\u304a\u308a\uff0c\u305d\u308c\u305e\u308c\u306b\u6574\u6570\u306eID\u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u308b\uff0e\u5024\u306e\u7bc4\u56f2\u306f[1, 36]\uff0e None Examples: >>> wisdm_path = Path ( 'path/to/dataset' ) >>> wisdm = WISDM ( wisdm_path ) >>> >>> # \u88ab\u9a13\u80051, 2, 3\u306e\u307f\u3092\u8aad\u307f\u8fbc\u3080 >>> x , y = wisdm . load ( window_size = 256 , stride = 256 , ftrim_sec = 0 , btrim_sec = 0 , subjects = [ 1 , 2 , 3 ]) >>> print ( f 'x: { x . shape } , y: { y . shape } ' ) >>> >>> # > x: (?, 3, 256), y: (?, 2) Returns: Type Description Tuple[numpy.ndarray, numpy.ndarray] sliding-window\u3067\u5207\u308a\u51fa\u3057\u305f\u5165\u529b\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u30d5\u30ec\u30fc\u30e0\u30ea\u30b9\u30c8 x_frames\u306f3\u6b21\u5143\u914d\u5217\u3067\u69cb\u9020\u306f\u5927\u307e\u304b\u306b(Batch, Channels, Frame)\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e Channels\u306f\u52a0\u901f\u5ea6\u30bb\u30f3\u30b5\u306e\u8ef8\u3092\u8868\u3057\u3066\u304a\u308a\uff0c\u5148\u982d\u304b\u3089x, y, z\u3067\u3042\u308b\uff0e y_frames\u306f2\u6b21\u5143\u914d\u5217\u3067\u69cb\u9020\u306f\u5927\u307e\u304b\u306b(Batch, Labels)\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e Labels\u306f\u5148\u982d\u304b\u3089\u9806\u306bactivity\uff0csubject\u3092\u8868\u3057\u3066\u3044\u308b\uff0e y_frames\u3067\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5185\u306e\u5024\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\u305f\u3081\uff0c\u5206\u985e\u3067\u7528\u3044\u308b\u969b\u306f\u30e9\u30d9\u30eb\u306e\u518d\u5272\u308a\u5f53\u3066\u304c\u5fc5\u8981\u3068\u306a\u308b\u3053\u3068\u306b\u6ce8\u610f\uff0e load ( path ) Function for loading WISDM dataset Parameters: Name Type Description Default path Path Directory path of WISDM dataset('data' directory) required Returns: Type Description Tuple[List[pandas.core.frame.DataFrame], List[pandas.core.frame.DataFrame]] Sensor data segmented by activity and subject load_raw ( path ) Function for loading raw data of WISDM dataset Parameters: Name Type Description Default path Path Directory path of WISDM dataset('data' directory) required Returns: Type Description DataFrame raw data of WISDM dataset","title":"WISDM Dataset Loader"},{"location":"refs/datasets/wisdm/#wisdm-dataset-loader","text":"","title":"WISDM Dataset Loader"},{"location":"refs/datasets/wisdm/#sensorutils.datasets.wisdm.WISDM","text":"WISDM\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u8a18\u9332\u3055\u308c\u3066\u3044\u308b\u30bb\u30f3\u30b5\u30c7\u30fc\u30bf\u3068\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\uff0e Parameters: Name Type Description Default path Path WISDM\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30d1\u30b9\uff0e required","title":"WISDM"},{"location":"refs/datasets/wisdm/#sensorutils.datasets.wisdm.WISDM.load","text":"WISDM\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8aad\u307f\u8fbc\u307f\uff0csliding-window\u51e6\u7406\u3092\u884c\u3063\u305f\u30c7\u30fc\u30bf\u3092\u8fd4\u3059\uff0e Parameters: Name Type Description Default window_size int \u30d5\u30ec\u30fc\u30e0\u5206\u3051\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u30b5\u30a4\u30ba required stride int \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u79fb\u52d5\u5e45 required ftrim_sec int \u30bb\u30b0\u30e1\u30f3\u30c8\u5148\u982d\u306e\u30c8\u30ea\u30df\u30f3\u30b0\u30b5\u30a4\u30ba(\u5358\u4f4d\u306f\u79d2) 3 btrim_sec int \u30bb\u30b0\u30e1\u30f3\u30c8\u672b\u5c3e\u306e\u30c8\u30ea\u30df\u30f3\u30b0\u30b5\u30a4\u30ba(\u5358\u4f4d\u306f\u79d2) 3 subjects Optional[list] \u30ed\u30fc\u30c9\u3059\u308b\u88ab\u9a13\u8005\u3092\u6307\u5b9a\u3059\u308b\uff0e\u6307\u5b9a\u3055\u308c\u306a\u3044\u5834\u5408\u306f\u3059\u3079\u3066\u306e\u88ab\u9a13\u8005\u306e\u30c7\u30fc\u30bf\u3092\u8fd4\u3059\uff0e \u88ab\u9a13\u8005\u306f\u8a0836\u540d\u304a\u308a\uff0c\u305d\u308c\u305e\u308c\u306b\u6574\u6570\u306eID\u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u308b\uff0e\u5024\u306e\u7bc4\u56f2\u306f[1, 36]\uff0e None Examples: >>> wisdm_path = Path ( 'path/to/dataset' ) >>> wisdm = WISDM ( wisdm_path ) >>> >>> # \u88ab\u9a13\u80051, 2, 3\u306e\u307f\u3092\u8aad\u307f\u8fbc\u3080 >>> x , y = wisdm . load ( window_size = 256 , stride = 256 , ftrim_sec = 0 , btrim_sec = 0 , subjects = [ 1 , 2 , 3 ]) >>> print ( f 'x: { x . shape } , y: { y . shape } ' ) >>> >>> # > x: (?, 3, 256), y: (?, 2) Returns: Type Description Tuple[numpy.ndarray, numpy.ndarray] sliding-window\u3067\u5207\u308a\u51fa\u3057\u305f\u5165\u529b\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u30d5\u30ec\u30fc\u30e0\u30ea\u30b9\u30c8 x_frames\u306f3\u6b21\u5143\u914d\u5217\u3067\u69cb\u9020\u306f\u5927\u307e\u304b\u306b(Batch, Channels, Frame)\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e Channels\u306f\u52a0\u901f\u5ea6\u30bb\u30f3\u30b5\u306e\u8ef8\u3092\u8868\u3057\u3066\u304a\u308a\uff0c\u5148\u982d\u304b\u3089x, y, z\u3067\u3042\u308b\uff0e y_frames\u306f2\u6b21\u5143\u914d\u5217\u3067\u69cb\u9020\u306f\u5927\u307e\u304b\u306b(Batch, Labels)\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e Labels\u306f\u5148\u982d\u304b\u3089\u9806\u306bactivity\uff0csubject\u3092\u8868\u3057\u3066\u3044\u308b\uff0e y_frames\u3067\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5185\u306e\u5024\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\u305f\u3081\uff0c\u5206\u985e\u3067\u7528\u3044\u308b\u969b\u306f\u30e9\u30d9\u30eb\u306e\u518d\u5272\u308a\u5f53\u3066\u304c\u5fc5\u8981\u3068\u306a\u308b\u3053\u3068\u306b\u6ce8\u610f\uff0e","title":"load()"},{"location":"refs/datasets/wisdm/#sensorutils.datasets.wisdm.load","text":"Function for loading WISDM dataset Parameters: Name Type Description Default path Path Directory path of WISDM dataset('data' directory) required Returns: Type Description Tuple[List[pandas.core.frame.DataFrame], List[pandas.core.frame.DataFrame]] Sensor data segmented by activity and subject","title":"load()"},{"location":"refs/datasets/wisdm/#sensorutils.datasets.wisdm.load_raw","text":"Function for loading raw data of WISDM dataset Parameters: Name Type Description Default path Path Directory path of WISDM dataset('data' directory) required Returns: Type Description DataFrame raw data of WISDM dataset","title":"load_raw()"}]}